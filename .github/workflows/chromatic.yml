name: Chromatic

on:
  push:
    branches:
      - '**'

jobs:
  chromatic-deployment:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      storybookUrl: ${{ steps.chromatic.outputs.storybookUrl }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: https://github.com/launchdarkly
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - uses: dkershner6/aws-ssm-getparameters-action@v1
        with:
          parameterPairs: '/production/common/launchpad-ui/chromatic-token = CHROMATIC_TOKEN'
          withDecryption: 'true'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Publish to Chromatic
        id: chromatic
        uses: chromaui/action@v1
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'
        with:
          projectToken: ${{ env.CHROMATIC_TOKEN }}
          buildScriptName: 'storybook:build'
          exitOnceUploaded: true
          onlyChanged: true
          externals: packages/(icons/src/img|tokens/src)/**

  a11y:
    name: a11y
    runs-on: ubuntu-latest
    needs: chromatic-deployment
    env:
      STORYBOOK_URL: ${{needs.chromatic-deployment.outputs.storybookUrl}}
    strategy:
      fail-fast: false
      matrix:
        shard: [1/4, 2/4, 3/4, 4/4]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Get Playwright Version
        id: get-version
        run: |
          echo "VERSION=$(pnpm playwright --version)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Cache Browsers
        id: cache-browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.get-version.outputs.VERSION }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright
        if: steps.cache-browsers.outputs.cache-hit != 'true'
        run: pnpm playwright install

      - name: Playwright
        run: pnpm playwright test a11y --shard ${{ matrix.shard }}

      - name: Upload blob report to GitHub Actions Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: all-blob-reports
          path: blob-report
          retention-days: 1

  merge-reports:
    # Merge reports after playwright-tests, even if some shards have failed
    if: always()
    needs: [a11y]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v3
        with:
          name: all-blob-reports
          path: all-blob-reports

      - name: Merge into HTML Report
        run: pnpm playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload HTML report
        uses: actions/upload-artifact@v3
        with:
          name: html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 14
