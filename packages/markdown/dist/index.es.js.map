{"version":3,"file":"index.es.js","sources":["../src/utils.ts","../src/Markdown.tsx"],"sourcesContent":["import DOMPurify from 'isomorphic-dompurify';\nimport { marked } from 'marked';\n\nfunction isAnchorNode(node: Element): node is HTMLAnchorElement {\n  return node.tagName.toLowerCase() === 'a';\n}\n\nfunction renderMarkdown(\n  source: string,\n  {\n    baseUri,\n    allowedTags,\n  }: {\n    baseUri?: string;\n    allowedTags?: string[];\n  } = {}\n) {\n  const renderer = new marked.Renderer();\n  marked.setOptions({\n    gfm: true,\n    breaks: true,\n  });\n  renderer.link = function (href: string, title: string, text: string) {\n    const link = marked.Renderer.prototype.link.call(this, href, title, text);\n    if (!(href.startsWith('https://') || href.startsWith('http://'))) {\n      return link;\n    }\n    if (baseUri && href.startsWith(baseUri)) {\n      return link;\n    }\n    return link.replace('<a', \"<a target='_blank' rel='noopener noreferrer'\");\n  };\n\n  const html = marked(source, { renderer });\n\n  const sanitizationConfig: DOMPurify.Config = {\n    KEEP_CONTENT: false,\n    ADD_ATTR: ['target'],\n    FORBID_ATTR: ['style', 'class'],\n  };\n\n  if (allowedTags) {\n    sanitizationConfig.ALLOWED_TAGS = allowedTags;\n  }\n\n  return DOMPurify.sanitize(html, sanitizationConfig);\n}\n\nexport { isAnchorNode, renderMarkdown };\n","import type { ElementType, RefObject } from 'react';\n\nimport { cx } from 'classix';\nimport DOMPurify from 'isomorphic-dompurify';\n\nimport styles from './styles/Markdown.module.css';\nimport { isAnchorNode, renderMarkdown } from './utils';\n\nDOMPurify.addHook('afterSanitizeAttributes', (node) => {\n  // Ensure we add the required rel attribute.\n  if (isAnchorNode(node) && node.target.toLowerCase() === '_blank') {\n    node.setAttribute('rel', 'noopener noreferrer');\n  } else {\n    node.removeAttribute('target');\n  }\n});\n\ntype MarkdownProps = {\n  source: string;\n  className?: string;\n  baseUri?: string;\n  allowedTags?: string[];\n  container?: ElementType;\n  textRef?: RefObject<HTMLElement>;\n  'data-test-id'?: string;\n};\n\nconst Markdown = ({\n  source,\n  className,\n  baseUri,\n  allowedTags,\n  container = 'div',\n  textRef,\n  'data-test-id': testId = 'markdown',\n}: MarkdownProps) => {\n  const Container = container;\n  const classes = cx(styles.Markdown, className);\n  return (\n    <Container\n      className={classes}\n      // We sanitize \"source\" (via DOMPurify) before inserting it into the DOM, to protect against XSS attacks.\n      // Using dangerouslySetInnerHTML is safe.\n      dangerouslySetInnerHTML={{\n        __html: renderMarkdown(source, { baseUri, allowedTags }),\n      }}\n      ref={textRef}\n      data-test-id={testId}\n    />\n  );\n};\n\nexport { Markdown };\nexport type { MarkdownProps };\n"],"names":[],"mappings":";;;;;;;;AAGA,SAAS,aAAa,MAA0C;AACvD,SAAA,KAAK,QAAQ,YAAA,MAAkB;AACxC;AAEA,SAAS,eACP,QACA;AAAA,EACE;AAAA,EACA;AACF,IAGI,IACJ;AACM,QAAA,WAAW,IAAI,OAAO;AAC5B,SAAO,WAAW;AAAA,IAChB,KAAK;AAAA,IACL,QAAQ;AAAA,EAAA,CACT;AACD,WAAS,OAAO,SAAU,MAAc,OAAe,MAAc;AAC7D,UAAA,OAAO,OAAO,SAAS,UAAU,KAAK,KAAK,MAAM,MAAM,OAAO,IAAI;AACpE,QAAA,EAAE,KAAK,WAAW,UAAU,KAAK,KAAK,WAAW,SAAS,IAAI;AACzD,aAAA;AAAA,IACT;AACA,QAAI,WAAW,KAAK,WAAW,OAAO,GAAG;AAChC,aAAA;AAAA,IACT;AACO,WAAA,KAAK,QAAQ,MAAM,8CAA8C;AAAA,EAAA;AAG1E,QAAM,OAAO,OAAO,QAAQ,EAAE,SAAU,CAAA;AAExC,QAAM,qBAAuC;AAAA,IAC3C,cAAc;AAAA,IACd,UAAU,CAAC,QAAQ;AAAA,IACnB,aAAa,CAAC,SAAS,OAAO;AAAA,EAAA;AAGhC,MAAI,aAAa;AACf,uBAAmB,eAAe;AAAA,EACpC;AAEO,SAAA,UAAU,SAAS,MAAM,kBAAkB;AACpD;ACtCA,UAAU,QAAQ,2BAA2B,CAAC,SAAS;AAErD,MAAI,aAAa,IAAI,KAAK,KAAK,OAAO,kBAAkB,UAAU;AAC3D,SAAA,aAAa,OAAO,qBAAqB;AAAA,EAAA,OACzC;AACL,SAAK,gBAAgB,QAAQ;AAAA,EAC/B;AACF,CAAC;AAYD,MAAM,WAAW,CAAC;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AAAA,EACZ;AAAA,EACA,gBAAgB,SAAS;AAC3B,MAAqB;AACnB,QAAM,YAAY;AAClB,QAAM,UAAU,GAAG,OAAO,UAAU,SAAS;AAE3C,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,WAAW;AAAA,MAGX,yBAAyB;AAAA,QACvB,QAAQ,eAAe,QAAQ,EAAE,SAAS,aAAa;AAAA,MACzD;AAAA,MACA,KAAK;AAAA,MACL,gBAAc;AAAA,IAAA;AAAA,EAAA;AAGpB;"}