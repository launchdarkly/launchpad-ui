{"version":3,"file":"index.js","sources":["../src/CopyCodeButton.tsx","../src/CopyToClipboard.tsx"],"sourcesContent":["import type { ButtonHTMLAttributes, ReactNode } from 'react';\n\nimport { cx } from 'classix';\nimport { forwardRef } from 'react';\n\nimport styles from './styles/CopyCodeButton.module.css';\n\ntype CopyCodeButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n  children: ReactNode;\n  'data-test-id'?: string;\n};\n\nconst CopyCodeButton = forwardRef<HTMLButtonElement, CopyCodeButtonProps>(\n  ({ className, children, 'data-test-id': testId = 'copy-code-button', ...rest }, ref) => {\n    return (\n      <button\n        ref={ref}\n        data-test-id={testId}\n        className={cx(styles['CopyCodeButton'], className)}\n        {...rest}\n      >\n        {children}\n      </button>\n    );\n  }\n);\n\nCopyCodeButton.displayName = 'CopyCodeButton';\n\nexport { CopyCodeButton };\nexport type { CopyCodeButtonProps };\n","import type { TooltipProps } from '@launchpad-ui/tooltip';\nimport type { HTMLAttributes, KeyboardEventHandler } from 'react';\n\nimport { CheckCircle } from '@launchpad-ui/icons';\nimport { Tooltip } from '@launchpad-ui/tooltip';\nimport { Slot } from '@radix-ui/react-slot';\nimport { announce } from '@react-aria/live-announcer';\nimport { cx } from 'classix';\nimport { forwardRef, useCallback, useImperativeHandle, useRef, useState } from 'react';\n\nimport { CopyCodeButton } from './CopyCodeButton';\nimport styles from './styles/CopyToClipboard.module.css';\n\ntype CopyToClipboardProps = HTMLAttributes<HTMLSpanElement> & {\n  triggerAriaLabel?: string;\n  customCopiedText?: string;\n  text: string;\n  tooltip?: string | JSX.Element;\n  tooltipOptions?: Partial<TooltipProps>;\n  popoverTargetClassName?: string;\n  onCopy?(): void;\n  asChild?: boolean;\n  'data-test-id'?: string;\n};\n\ntype CopyToClipboardHandleRef = {\n  handleCopy: () => void;\n};\n\nconst CopyConfirmation = () => (\n  <span className={styles['Clipboard-confirmation']}>\n    <CheckCircle className={styles['Clipboard-checkmark']} size=\"medium\" />\n    <span className={styles['Clipboard-copied']}>Copied!</span>\n  </span>\n);\n\nconst CopyToClipboard = forwardRef<CopyToClipboardHandleRef, CopyToClipboardProps>(\n  (\n    {\n      customCopiedText,\n      text,\n      tooltip,\n      tooltipOptions = {\n        placement: 'bottom',\n      },\n      className,\n      popoverTargetClassName,\n      children,\n      triggerAriaLabel,\n      onCopy,\n      asChild,\n      'data-test-id': testId = 'copy-to-clipboard',\n      ...rest\n    },\n    ref\n  ) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [wasCopied, setWasCopied] = useState(false);\n    const triggerRef = useRef<HTMLButtonElement>(null);\n\n    const classes = cx(styles.CopyToClipboard, className);\n\n    const handleCopy = useCallback(async () => {\n      await navigator.clipboard.writeText(text);\n      const node = triggerRef.current;\n\n      if (node) {\n        node.focus();\n      }\n\n      setIsOpen(true);\n      setWasCopied(true);\n      announce('Copied!', 'polite', 300);\n\n      onCopy?.();\n    }, [onCopy, triggerRef, text, setIsOpen, setWasCopied]);\n\n    // this imperative handle is useful when a parent needs to programmatically\n    // call `handleCopy`, e.g. when the parent node is clicked\n    useImperativeHandle(\n      ref,\n      () => ({\n        handleCopy,\n      }),\n      [handleCopy]\n    );\n\n    const tooltipText = wasCopied\n      ? customCopiedText || <CopyConfirmation />\n      : tooltip || 'Copy to clipboard';\n    const triggerAriaLabelText = triggerAriaLabel || `Copy ${text} to your clipboard.`;\n\n    const handleInteraction = (isOpen: boolean) => {\n      setIsOpen(isOpen);\n      setTimeout(() => setWasCopied((prev) => (!isOpen ? isOpen : prev)));\n    };\n\n    const handleKeyDown: KeyboardEventHandler<HTMLElement> = (event) => {\n      const validKeys = ['Spacebar', ' ', 'Enter'];\n\n      if (validKeys.includes(event.key)) {\n        event.preventDefault();\n        handleCopy();\n      }\n    };\n\n    const Component = asChild ? Slot : CopyCodeButton;\n\n    return (\n      <span className={classes} data-test-id={testId} {...rest}>\n        <Tooltip\n          {...tooltipOptions}\n          isOpen={isOpen}\n          content={tooltipText}\n          onInteraction={handleInteraction}\n          targetClassName={popoverTargetClassName}\n        >\n          <Component\n            onClick={handleCopy}\n            onKeyDown={handleKeyDown}\n            ref={triggerRef}\n            aria-label={triggerAriaLabelText}\n            role=\"button\"\n            tabIndex={0}\n          >\n            {children}\n          </Component>\n        </Tooltip>\n      </span>\n    );\n  }\n);\n\nCopyToClipboard.displayName = 'CopyToClipboard';\n\nexport { CopyConfirmation, CopyToClipboard };\nexport type { CopyToClipboardProps, CopyToClipboardHandleRef };\n"],"names":["CopyCodeButton","forwardRef","className","children","testId","rest","ref","cx","styles","displayName","CopyConfirmation","_jsxs","_jsx","CheckCircle","CopyToClipboard","customCopiedText","text","tooltip","tooltipOptions","placement","popoverTargetClassName","triggerAriaLabel","onCopy","asChild","isOpen","setIsOpen","useState","wasCopied","setWasCopied","triggerRef","useRef","classes","handleCopy","useCallback","navigator","clipboard","writeText","node","current","focus","announce","useImperativeHandle","tooltipText","triggerAriaLabelText","handleInteraction","setTimeout","prev","handleKeyDown","event","validKeys","includes","key","preventDefault","Component","Slot","Tooltip"],"mappings":";;;;;;;;;;;;;;AAYMA,MAAAA,iBAAiBC,iBACrB,CAAC;AAAA,EAAEC;AAAAA,EAAWC;AAAAA,EAAU,gBAAgBC,SAAS;AAAA,KAAuBC;AAAK,GAAGC,QAAQ;AACtF,wCACE,UAAA;AAAA,IACE;AAAA,IACA,gBAAcF;AAAAA,IACd,WAAWG,QAAAA,GAAGC,SAAO,mBAAmBN,SAAS;AAAA,IAAE,GAC/CG;AAAAA,IAAI;AAAA,EAAA,CAGD;AAEb,CAAC;AAGHL,eAAeS,cAAc;;;;;;;;ACEvBC,MAAAA,mBAAmB,MACvBC,2BAAA,KAAA,QAAA;AAAA,EAAM,WAAWH,OAAO;AAAA,EAA0B,UAAA,CAChDI,2BAAA,IAACC,mBAAW;AAAA,IAAC,WAAWL,OAAO;AAAA,IAAwB,MAAK;AAAA,EAAA,CAAQ,GACpEI,2BAAA,IAAA,QAAA;AAAA,IAAM,WAAWJ,OAAO;AAAA,IAAoB,UAAA;AAAA,EAAA,CAAe,CAAA;AAAA,CAE9D;AAEKM,MAAAA,kBAAkBb,iBACtB,CACE;AAAA,EACEc;AAAAA,EACAC;AAAAA,EAAAA,SACAC;AAAAA,EACAC,iBAAiB;AAAA,IACfC,WAAW;AAAA,EACb;AAAA,EACAjB;AAAAA,EACAkB;AAAAA,EACAjB;AAAAA,EACAkB;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACA,gBAAgBnB,SAAS;AAAA,KACtBC;AACL,GACAC,QACG;AACH,QAAM,CAACkB,QAAQC,SAAS,IAAIC,eAAS,KAAK;AAC1C,QAAM,CAACC,WAAWC,YAAY,IAAIF,eAAS,KAAK;AAC1CG,QAAAA,aAAaC,aAA0B,IAAI;AAEjD,QAAMC,UAAUxB,QAAAA,GAAGC,OAAOM,iBAAiBZ,SAAS;AAE9C8B,QAAAA,aAAaC,MAAAA,YAAY,YAAY;AACnCC,UAAAA,UAAUC,UAAUC,UAAUpB,IAAI;AACxC,UAAMqB,OAAOR,WAAWS;AAExB,QAAID,MAAM;AACRA,WAAKE,MAAO;AAAA,IACd;AAEAd,cAAU,IAAI;AACdG,iBAAa,IAAI;AACRY,kBAAAA,SAAA,WAAW,UAAU,GAAG;AAEvB;AAAA,EAAA,GACT,CAAClB,QAAQO,YAAYb,MAAMS,WAAWG,YAAY,CAAC;AAItDa,QAAAA,oBACEnC,KACA,OAAO;AAAA,IACL0B;AAAAA,EAAAA,IAEF,CAACA,UAAU,CAAC;AAGRU,QAAAA,cAAcf,YAChBZ,oBAAoBH,2BAAAA,IAAC,kBAAmB,CAAA,CAAA,IACxCK,aAAW;AACT0B,QAAAA,uBAAuBtB,oBAAqB,QAAOL;AAEnD4B,QAAAA,oBAAoB,CAACpB,YAAoB;AAC7CC,cAAUD,OAAM;AAChBqB,eAAW,MAAMjB,aAAckB,CAAAA,SAAU,CAACtB,UAASA,UAASsB,IAAK,CAAC;AAAA,EAAA;AAGpE,QAAMC,gBAAoDC,CAAU,UAAA;AAClE,UAAMC,YAAY,CAAC,YAAY,KAAK,OAAO;AAE3C,QAAIA,UAAUC,SAASF,MAAMG,GAAG,GAAG;AACjCH,YAAMI,eAAgB;AACV;IACd;AAAA,EAAA;AAGIC,QAAAA,YAAY9B,UAAU+B,UAAOtD,OAAAA;AAEnC,wCACE,QAAA;AAAA,IAAM,WAAW+B;AAAAA,IAAS,gBAAc3B;AAAAA,IAAO,GAAKC;AAAAA,IAAI,yCACrDkD,iBAAO;AAAA,MAAA,GACFrC;AAAAA,MACJ;AAAA,MACA,SAASwB;AAAAA,MACT,eAAeE;AAAAA,MACf,iBAAiBxB;AAAAA,MAAuB,yCAEvC,WAAS;AAAA,QACR,SAASY;AAAAA,QACT,WAAWe;AAAAA,QACX,KAAKlB;AAAAA,QACL,cAAYc;AAAAA,QACZ,MAAK;AAAA,QACL,UAAU;AAAA,QAAE;AAAA,MAAA,CAEH;AAAA,IAAA,CACC;AAAA,EAAA,CAET;AAEX,CAAC;AAGH7B,gBAAgBL,cAAc;;;;"}