{"version":3,"file":"index.es.js","sources":["../src/CopyCodeButton.tsx","../src/CopyToClipboard.tsx"],"sourcesContent":["import type { ButtonHTMLAttributes, ReactNode } from 'react';\n\nimport { cx } from 'classix';\nimport { forwardRef } from 'react';\n\nimport styles from './styles/CopyCodeButton.module.css';\n\ntype CopyCodeButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n  children: ReactNode;\n  'data-test-id'?: string;\n};\n\nconst CopyCodeButton = forwardRef<HTMLButtonElement, CopyCodeButtonProps>(\n  ({ className, children, 'data-test-id': testId = 'copy-code-button', ...rest }, ref) => {\n    return (\n      <button\n        ref={ref}\n        data-test-id={testId}\n        className={cx(styles['CopyCodeButton'], className)}\n        {...rest}\n      >\n        {children}\n      </button>\n    );\n  }\n);\n\nCopyCodeButton.displayName = 'CopyCodeButton';\n\nexport { CopyCodeButton };\nexport type { CopyCodeButtonProps };\n","import type { TooltipProps } from '@launchpad-ui/tooltip';\nimport type { HTMLAttributes, KeyboardEventHandler } from 'react';\n\nimport { CheckCircle } from '@launchpad-ui/icons';\nimport { Tooltip } from '@launchpad-ui/tooltip';\nimport { Slot } from '@radix-ui/react-slot';\nimport { announce } from '@react-aria/live-announcer';\nimport { cx } from 'classix';\nimport { forwardRef, useCallback, useImperativeHandle, useRef, useState } from 'react';\n\nimport { CopyCodeButton } from './CopyCodeButton';\nimport styles from './styles/CopyToClipboard.module.css';\n\ntype CopyToClipboardProps = HTMLAttributes<HTMLSpanElement> & {\n  triggerAriaLabel?: string;\n  customCopiedText?: string;\n  text: string;\n  tooltip?: string | JSX.Element;\n  tooltipOptions?: Partial<TooltipProps>;\n  popoverTargetClassName?: string;\n  onCopy?(): void;\n  asChild?: boolean;\n  'data-test-id'?: string;\n};\n\ntype CopyToClipboardHandleRef = {\n  handleCopy: () => void;\n};\n\nconst CopyConfirmation = () => (\n  <span className={styles['Clipboard-confirmation']}>\n    <CheckCircle className={styles['Clipboard-checkmark']} size=\"medium\" />\n    <span className={styles['Clipboard-copied']}>Copied!</span>\n  </span>\n);\n\nconst CopyToClipboard = forwardRef<CopyToClipboardHandleRef, CopyToClipboardProps>(\n  (\n    {\n      customCopiedText,\n      text,\n      tooltip,\n      tooltipOptions = {\n        placement: 'bottom',\n      },\n      className,\n      popoverTargetClassName,\n      children,\n      triggerAriaLabel,\n      onCopy,\n      asChild,\n      'data-test-id': testId = 'copy-to-clipboard',\n      ...rest\n    },\n    ref\n  ) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [wasCopied, setWasCopied] = useState(false);\n    const triggerRef = useRef<HTMLButtonElement>(null);\n\n    const classes = cx(styles.CopyToClipboard, className);\n\n    const handleCopy = useCallback(async () => {\n      await navigator.clipboard.writeText(text);\n      const node = triggerRef.current;\n\n      if (node) {\n        node.focus();\n      }\n\n      setIsOpen(true);\n      setWasCopied(true);\n      announce('Copied!', 'polite', 300);\n\n      onCopy?.();\n    }, [onCopy, triggerRef, text, setIsOpen, setWasCopied]);\n\n    // this imperative handle is useful when a parent needs to programmatically\n    // call `handleCopy`, e.g. when the parent node is clicked\n    useImperativeHandle(\n      ref,\n      () => ({\n        handleCopy,\n      }),\n      [handleCopy]\n    );\n\n    const tooltipText = wasCopied\n      ? customCopiedText || <CopyConfirmation />\n      : tooltip || 'Copy to clipboard';\n    const triggerAriaLabelText = triggerAriaLabel || `Copy ${text} to your clipboard.`;\n\n    const handleInteraction = (isOpen: boolean) => {\n      setIsOpen(isOpen);\n      setTimeout(() => setWasCopied((prev) => (!isOpen ? isOpen : prev)));\n    };\n\n    const handleKeyDown: KeyboardEventHandler<HTMLElement> = (event) => {\n      const validKeys = ['Spacebar', ' ', 'Enter'];\n\n      if (validKeys.includes(event.key)) {\n        event.preventDefault();\n        handleCopy();\n      }\n    };\n\n    const Component = asChild ? Slot : CopyCodeButton;\n\n    return (\n      <span className={classes} data-test-id={testId} {...rest}>\n        <Tooltip\n          {...tooltipOptions}\n          isOpen={isOpen}\n          content={tooltipText}\n          onInteraction={handleInteraction}\n          targetClassName={popoverTargetClassName}\n        >\n          <Component\n            onClick={handleCopy}\n            onKeyDown={handleKeyDown}\n            ref={triggerRef}\n            aria-label={triggerAriaLabelText}\n            role=\"button\"\n            tabIndex={0}\n          >\n            {children}\n          </Component>\n        </Tooltip>\n      </span>\n    );\n  }\n);\n\nCopyToClipboard.displayName = 'CopyToClipboard';\n\nexport { CopyConfirmation, CopyToClipboard };\nexport type { CopyToClipboardProps, CopyToClipboardHandleRef };\n"],"names":["styles","isOpen"],"mappings":";;;;;;;;;;;;AAYA,MAAM,iBAAiB;AAAA,EACrB,CAAC,EAAE,WAAW,UAAU,gBAAgB,SAAS,uBAAuB,KAAK,GAAG,QAAQ;AAEpF,WAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QACA,gBAAc;AAAA,QACd,WAAW,GAAGA,SAAO,mBAAmB,SAAS;AAAA,QAChD,GAAG;AAAA,QAEH;AAAA,MAAA;AAAA,IAAA;AAAA,EAGP;AACF;AAEA,eAAe,cAAc;;;;;;;;ACE7B,MAAM,mBAAmB,MACvB,qBAAC,QAAK,EAAA,WAAW,OAAO,2BACtB,UAAA;AAAA,EAAA,oBAAC,aAAY,EAAA,WAAW,OAAO,wBAAwB,MAAK,UAAS;AAAA,EACpE,oBAAA,QAAA,EAAK,WAAW,OAAO,qBAAqB,UAAO,WAAA;AAAA,GACtD;AAGF,MAAM,kBAAkB;AAAA,EACtB,CACE;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA,iBAAiB;AAAA,MACf,WAAW;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,gBAAgB,SAAS;AAAA,OACtB;AAAA,KAEL,QACG;AACH,UAAM,CAAC,QAAQ,SAAS,IAAI,SAAS,KAAK;AAC1C,UAAM,CAAC,WAAW,YAAY,IAAI,SAAS,KAAK;AAC1C,UAAA,aAAa,OAA0B,IAAI;AAEjD,UAAM,UAAU,GAAG,OAAO,iBAAiB,SAAS;AAE9C,UAAA,aAAa,YAAY,YAAY;AACnC,YAAA,UAAU,UAAU,UAAU,IAAI;AACxC,YAAM,OAAO,WAAW;AAExB,UAAI,MAAM;AACR,aAAK,MAAM;AAAA,MACb;AAEA,gBAAU,IAAI;AACd,mBAAa,IAAI;AACR,eAAA,WAAW,UAAU,GAAG;AAExB;AAAA,IAAA,GACR,CAAC,QAAQ,YAAY,MAAM,WAAW,YAAY,CAAC;AAItD;AAAA,MACE;AAAA,MACA,OAAO;AAAA,QACL;AAAA,MAAA;AAAA,MAEF,CAAC,UAAU;AAAA,IAAA;AAGb,UAAM,cAAc,YAChB,oBAAqB,oBAAA,kBAAA,CAAiB,CAAA,IACtC,WAAW;AACT,UAAA,uBAAuB,oBAAoB,QAAQ;AAEnD,UAAA,oBAAoB,CAACC,YAAoB;AAC7C,gBAAUA,OAAM;AACL,iBAAA,MAAM,aAAa,CAAC,SAAU,CAACA,UAASA,UAAS,IAAK,CAAC;AAAA,IAAA;AAG9D,UAAA,gBAAmD,CAAC,UAAU;AAClE,YAAM,YAAY,CAAC,YAAY,KAAK,OAAO;AAE3C,UAAI,UAAU,SAAS,MAAM,GAAG,GAAG;AACjC,cAAM,eAAe;AACV;MACb;AAAA,IAAA;AAGI,UAAA,YAAY,UAAU,OAAO;AAEnC,+BACG,QAAK,EAAA,WAAW,SAAS,gBAAc,QAAS,GAAG,MAClD,UAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACE,GAAG;AAAA,QACJ;AAAA,QACA,SAAS;AAAA,QACT,eAAe;AAAA,QACf,iBAAiB;AAAA,QAEjB,UAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,SAAS;AAAA,YACT,WAAW;AAAA,YACX,KAAK;AAAA,YACL,cAAY;AAAA,YACZ,MAAK;AAAA,YACL,UAAU;AAAA,YAET;AAAA,UAAA;AAAA,QACH;AAAA,MAAA;AAAA,IAEJ,EAAA,CAAA;AAAA,EAEJ;AACF;AAEA,gBAAgB,cAAc;"}