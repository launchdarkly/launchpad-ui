{"version":3,"file":"index.js","sources":["../src/AppliedFilterButton.tsx","../src/FilterMenu.tsx","../src/AppliedFilter.tsx","../src/FilterButton.tsx","../src/Filter.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\n\nimport { ExpandMore } from '@launchpad-ui/icons';\nimport { cx } from 'classix';\nimport { Children, forwardRef } from 'react';\n\nimport styles from './styles/Filter.module.css';\n\ntype AppliedFilterButtonProps = {\n  name?: ReactNode;\n  className?: string;\n  children: ReactNode;\n  onClickFilterButton?(): void;\n  'data-test-id': string;\n};\n\ntype Ref = HTMLButtonElement;\n\nconst AppliedFilterButton = forwardRef<Ref, AppliedFilterButtonProps>((props, ref) => {\n  const { name, className, children, onClickFilterButton, 'data-test-id': testId } = props;\n\n  const hasDescription = Children.count(children) !== 0;\n\n  return (\n    <div data-test-id={testId}>\n      <button\n        aria-haspopup\n        className={cx(styles.appliedButton, className)}\n        ref={ref}\n        onClick={onClickFilterButton}\n      >\n        {name && (\n          <span className={styles.appliedName} data-test-id={`${testId}-name`}>\n            {name}\n            {hasDescription && ':'}\n          </span>\n        )}\n        {hasDescription && (\n          <span className={styles.appliedDescription} data-test-id={`${testId}-description`}>\n            {children}\n          </span>\n        )}\n        <ExpandMore size=\"small\" data-test-id={`${testId}-expand`} />\n      </button>\n    </div>\n  );\n});\n\nAppliedFilterButton.displayName = 'AppliedFilterButton';\n\nexport type { AppliedFilterButtonProps };\nexport { AppliedFilterButton };\n","import type { MenuProps } from '@launchpad-ui/menu';\nimport type { ChangeEvent, ReactNode } from 'react';\n\nimport { Button } from '@launchpad-ui/button';\nimport { Check } from '@launchpad-ui/icons';\nimport { Menu, MenuDivider, MenuItem, MenuSearch } from '@launchpad-ui/menu';\n\nimport styles from './styles/Filter.module.css';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype FilterOption<T = any> = {\n  name?: ReactNode;\n  isDisabled?: boolean;\n  isDivider?: boolean;\n  isChecked?: boolean;\n  value: T | null;\n  projKey?: string;\n  nested?: boolean;\n  groupHeader?: boolean;\n};\n\ntype FilterMenuProps = Pick<MenuProps<string>, 'enableVirtualization' | 'size' | 'data-test-id'> & {\n  options: FilterOption[];\n  onClearFilter?(): void;\n  enableSearch?: boolean;\n  searchValue?: string;\n  searchPlaceholder?: string;\n  searchAriaLabel?: string;\n  onSearchChange?(event: ChangeEvent<HTMLInputElement>): void;\n  onSelect?(): void;\n  isLoading?: boolean;\n  disabledOptionTooltip?: string;\n};\n\nconst FilterMenu = ({\n  options,\n  onClearFilter,\n  enableSearch,\n  searchValue,\n  searchPlaceholder,\n  searchAriaLabel,\n  onSelect,\n  onSearchChange,\n  isLoading = false,\n  disabledOptionTooltip,\n  enableVirtualization,\n  size,\n  'data-test-id': testId = 'filter-menu',\n}: FilterMenuProps) => {\n  const filterOptions = isLoading\n    ? [{ name: 'loading...', value: 'loading...', isDisabled: true }]\n    : options;\n\n  return (\n    <>\n      {onClearFilter && (\n        <Button\n          tabIndex={0}\n          className={styles.filterClearButton}\n          onClick={onClearFilter}\n          kind=\"link\"\n          data-test-id=\"clear-filter-button\"\n        >\n          CLEAR FILTER\n        </Button>\n      )}\n      <Menu\n        enableVirtualization={enableVirtualization}\n        size={size}\n        data-test-id={testId}\n        onSelect={onSelect}\n      >\n        {enableSearch && (\n          <MenuSearch\n            value={searchValue}\n            placeholder={searchPlaceholder}\n            onChange={onSearchChange}\n            ariaLabel={searchAriaLabel}\n          />\n        )}\n        {filterOptions.map((option, index) => {\n          if (option.isDivider) {\n            return <MenuDivider key={`divider-${index}`} />;\n          }\n          return (\n            <MenuItem\n              item={option}\n              disabled={option.isDisabled}\n              icon={option.isChecked ? Check : null}\n              key={option.value}\n              role=\"menuitemradio\"\n              aria-checked={option.isChecked ? 'true' : undefined}\n              nested={option.nested}\n              groupHeader={option.groupHeader}\n              tooltip={\n                option.isDisabled && disabledOptionTooltip ? disabledOptionTooltip : undefined\n              }\n              tooltipPlacement=\"right\"\n            >\n              {option.name}\n            </MenuItem>\n          );\n        })}\n      </Menu>\n    </>\n  );\n};\n\nexport { FilterMenu };\nexport type { FilterOption, FilterMenuProps };\n","import type { FilterOption } from './FilterMenu';\nimport type { ChangeEvent, ReactNode } from 'react';\n\nimport { Dropdown } from '@launchpad-ui/dropdown';\n\nimport { AppliedFilterButton } from './AppliedFilterButton';\nimport { FilterMenu } from './FilterMenu';\n\nconst SEARCH_INPUT_THRESHOLD = 4;\n\ntype AppliedFilterProps = {\n  searchValue?: string;\n  onSearchChange?(event: ChangeEvent<HTMLInputElement>): void;\n  onClearFilter?(): void;\n  searchPlaceholder?: string;\n  name?: ReactNode;\n  description: ReactNode;\n  options: FilterOption[];\n  className?: string;\n  onStateChange?({ isOpen }: { isOpen?: boolean }): void;\n  onSelect?(item: FilterOption): void;\n  isEmpty?: boolean;\n  isLoading?: boolean;\n  onClickFilterButton?(): void;\n  searchAriaLabel?: string;\n  'data-test-id'?: string;\n};\n\nconst AppliedFilter = ({\n  searchValue,\n  onSearchChange,\n  searchPlaceholder,\n  name,\n  description,\n  options,\n  className,\n  isEmpty,\n  isLoading,\n  onClickFilterButton,\n  onClearFilter,\n  searchAriaLabel,\n  'data-test-id': testId = 'applied-filter',\n  ...props\n}: AppliedFilterProps) => {\n  const enableSearch =\n    onSearchChange && (!!searchValue || options.length > SEARCH_INPUT_THRESHOLD || !isEmpty);\n\n  return (\n    <Dropdown targetClassName={className} placement=\"bottom-start\" enableArrow={false} {...props}>\n      <AppliedFilterButton\n        data-test-id={testId}\n        name={name}\n        onClickFilterButton={onClickFilterButton}\n      >\n        {description}\n      </AppliedFilterButton>\n\n      <FilterMenu\n        options={options}\n        searchValue={searchValue}\n        searchPlaceholder={searchPlaceholder}\n        enableSearch={enableSearch}\n        searchAriaLabel={searchAriaLabel}\n        onSearchChange={onSearchChange}\n        onClearFilter={onClearFilter}\n        isLoading={isLoading}\n      />\n    </Dropdown>\n  );\n};\n\nexport type { AppliedFilterProps };\nexport { AppliedFilter };\n","import type { ReactNode, SyntheticEvent } from 'react';\n\nimport { IconButton } from '@launchpad-ui/button';\nimport { Close, ExpandMore } from '@launchpad-ui/icons';\nimport { Tooltip } from '@launchpad-ui/tooltip';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { cx } from 'classix';\nimport { Children, forwardRef, useId } from 'react';\n\nimport styles from './styles/Filter.module.css';\n\ntype FilterButtonProps = {\n  name: ReactNode;\n  hideName?: boolean;\n  isClearable?: boolean;\n  onClear?(event: SyntheticEvent): void;\n  className?: string;\n  isSelected?: boolean;\n  clearTooltip?: string | JSX.Element;\n  children?: ReactNode;\n  onClickFilterButton?(): void;\n  'data-test-id'?: string;\n};\n\ntype Ref = HTMLButtonElement;\n\nconst FilterButton = forwardRef<Ref, FilterButtonProps>((props, ref) => {\n  const {\n    children,\n    name,\n    hideName,\n    isClearable,\n    clearTooltip,\n    onClear,\n    isSelected,\n    onClickFilterButton,\n    className,\n    'data-test-id': testId = 'filter-button',\n    ...rest\n  } = props;\n  const nameId = useId();\n  const descriptionId = useId();\n\n  const hasDescription = Children.count(children) !== 0;\n\n  const nameElement = (\n    <span className={styles.name}>\n      {name}\n      {hasDescription && ':'}\n    </span>\n  );\n\n  return (\n    <div className={styles.buttonContainer} data-test-id={testId}>\n      <button\n        {...rest}\n        aria-labelledby={`${nameId} ${hasDescription ? descriptionId : ''}`}\n        aria-haspopup\n        className={cx(styles.button, className, (isClearable || isSelected) && styles.isClearable)}\n        ref={ref}\n        onClick={onClickFilterButton}\n      >\n        {hideName ? (\n          <VisuallyHidden id={nameId}>{nameElement}</VisuallyHidden>\n        ) : (\n          <span id={nameId}>{nameElement}</span>\n        )}\n        {hasDescription && (\n          <span id={descriptionId} className={styles.description}>\n            {children}\n          </span>\n        )}\n        {!isClearable && <ExpandMore size=\"small\" />}\n      </button>\n      {isClearable && (\n        <Tooltip targetClassName={styles.clearTooltip} content={clearTooltip}>\n          <IconButton\n            aria-label=\"Clear filter\"\n            className={styles.clear}\n            data-test-id=\"clear-filter-button\"\n            icon={<Close size=\"tiny\" />}\n            onClick={onClear}\n          />\n        </Tooltip>\n      )}\n    </div>\n  );\n});\n\nFilterButton.defaultProps = {\n  clearTooltip: 'Clear filter',\n};\n\nFilterButton.displayName = 'FilterButton';\n\nexport { FilterButton };\nexport type { FilterButtonProps };\n","import type { FilterOption } from './FilterMenu';\nimport type { MenuProps } from '@launchpad-ui/menu';\nimport type { ChangeEvent, ReactNode, SyntheticEvent } from 'react';\n\nimport { Dropdown } from '@launchpad-ui/dropdown';\nimport { cx } from 'classix';\n\nimport { FilterButton } from './FilterButton';\nimport { FilterMenu } from './FilterMenu';\nimport styles from './styles/Filter.module.css';\n\nconst SEARCH_INPUT_THRESHOLD = 4;\n\ntype FilterProps = Pick<MenuProps<string>, 'size' | 'enableVirtualization'> & {\n  searchValue?: string;\n  onSearchChange?(event: ChangeEvent<HTMLInputElement>): void;\n  searchPlaceholder?: string;\n  searchAriaLabel?: string;\n  name: ReactNode;\n  hideName?: boolean;\n  description: ReactNode;\n  options: FilterOption[];\n  isClearable?: boolean;\n  onClear?(): void;\n  className?: string;\n  onStateChange?({ isOpen }: { isOpen?: boolean }): void;\n  isSelected?: boolean;\n  onSelect?(item: FilterOption): void;\n  isEmpty?: boolean;\n  isLoading?: boolean;\n  onClickFilterButton?(): void;\n  disabledOptionTooltip?: string;\n  'data-test-id'?: string;\n  triggerTestId?: string;\n};\n\nconst Filter = ({\n  searchValue,\n  onSearchChange,\n  searchPlaceholder,\n  searchAriaLabel,\n  name,\n  hideName,\n  description,\n  options,\n  isClearable,\n  onClear,\n  isSelected,\n  className,\n  isEmpty,\n  isLoading,\n  onClickFilterButton,\n  disabledOptionTooltip,\n  'data-test-id': testId = 'filter',\n  size,\n  enableVirtualization,\n  ...props\n}: FilterProps) => {\n  const enableSearch =\n    onSearchChange && (!!searchValue || options.length > SEARCH_INPUT_THRESHOLD || !isEmpty);\n\n  const dropdownClasses = cx(styles.filter, className);\n\n  const handleClear = (event: SyntheticEvent) => {\n    event.preventDefault();\n    onClear?.();\n  };\n\n  return (\n    <Dropdown targetTestId={testId} targetClassName={dropdownClasses} {...props}>\n      <FilterButton\n        isClearable={isClearable}\n        onClear={handleClear}\n        name={name}\n        hideName={hideName}\n        isSelected={isSelected}\n        onClickFilterButton={onClickFilterButton}\n      >\n        {description}\n      </FilterButton>\n      <FilterMenu\n        options={options}\n        searchValue={searchValue}\n        searchPlaceholder={searchPlaceholder}\n        searchAriaLabel={searchAriaLabel}\n        enableSearch={enableSearch}\n        onSearchChange={onSearchChange}\n        isLoading={isLoading}\n        disabledOptionTooltip={disabledOptionTooltip}\n        size={size}\n        enableVirtualization={enableVirtualization}\n      />\n    </Dropdown>\n  );\n};\n\nexport { Filter };\nexport type { FilterProps };\n"],"names":["forwardRef","name","Children","jsx","jsxs","cx","ExpandMore","Fragment","Button","Menu","MenuSearch","MenuDivider","MenuItem","Check","SEARCH_INPUT_THRESHOLD","description","Dropdown","isClearable","clearTooltip","useId","VisuallyHidden","Tooltip","IconButton","Close"],"mappings":"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"}