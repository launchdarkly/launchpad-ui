{"version":3,"file":"index.js","sources":["../src/Alert.tsx","../src/CollapsibleAlert.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from 'react';\n\nimport { IconButton } from '@launchpad-ui/button';\nimport { Close, StatusIcon } from '@launchpad-ui/icons';\nimport { cx } from 'classix';\nimport { useState } from 'react';\n\nimport styles from './styles/Alert.module.css';\n\ntype AlertProps = HTMLAttributes<HTMLDivElement> & {\n  'data-test-id'?: string;\n  /**\n   * When true, shows the compact Alert variant,\n   * width of Alert fits content.\n   */\n  compact?: boolean;\n  /**\n   * When true, shows Alert without background/border colors.\n   */\n  isInline?: boolean;\n  /**\n   * Passing in one of `info`, `success`, `warning`, `error`\n   * displays the style and icon pair associated with the variant.\n   * The default is info.\n   */\n  kind?: 'info' | 'success' | 'warning' | 'error';\n  /**\n   * Passing in one of `small`, `medium`\n   * displays either a small or medium Alert.\n   * The default is medium.\n   */\n  size?: 'small' | 'medium';\n  /**\n   * When true, shows the wide Alert variant, adds top margin,\n   * sets width to 86% (why?).\n   */\n  wide?: boolean;\n\n  /**\n   * When true, shows the close button. When button is clicked, the Alert\n   * is removed.\n   */\n  dismissible?: boolean;\n\n  /**\n   * Function fired on click of close button.\n   */\n  onDismiss?(): void;\n\n  /**\n   * When true no icon is rendered\n   */\n  noIcon?: boolean;\n\n  header?: ReactNode;\n};\n\nconst Alert = ({\n  children,\n  className,\n  compact,\n  isInline,\n  kind = 'info',\n  size = 'medium',\n  wide,\n  dismissible,\n  onDismiss,\n  noIcon,\n  header,\n  'data-test-id': testId = 'alert',\n  ...rest\n}: AlertProps) => {\n  const [dismissed, setDismissed] = useState(false);\n\n  const defaultClasses = `${styles.Alert} ${styles[`Alert--${kind}`]}`;\n  const sizeClass = size === 'small' && styles[`Alert--${size}`];\n  const classes = cx(\n    defaultClasses,\n    className,\n    isInline ? styles['Alert--inline'] : styles['Alert--bordered'],\n    sizeClass,\n    compact && styles['Alert--compact'],\n    wide && styles['Alert--wide']\n  );\n\n  const handleDismissClicked = () => {\n    if (onDismiss) {\n      onDismiss();\n    }\n\n    setDismissed(true);\n  };\n\n  if (dismissed) {\n    return null;\n  }\n\n  return (\n    <div\n      {...rest}\n      className={classes}\n      data-test-id={testId}\n      role={['info', 'success'].includes(kind) ? 'status' : 'alert'}\n    >\n      {!noIcon && (\n        <StatusIcon\n          kind={kind}\n          className={styles['Alert-icon']}\n          size={size}\n          data-test-id={`${testId}-status-icon`}\n        />\n      )}\n      <div className={styles['Alert-content']}>\n        {header && (\n          <h4 className={styles['Alert-heading']} data-test-id={`${testId}-header`}>\n            {header}\n          </h4>\n        )}\n        <div>{children}</div>\n      </div>\n      {dismissible && (\n        <IconButton\n          aria-label=\"Close this alert.\"\n          size=\"small\"\n          className={styles['Alert-close']}\n          icon={<Close size=\"small\" />}\n          kind=\"close\"\n          onClick={handleDismissClicked}\n          data-test-id={testId ? `${testId}-dismiss-button` : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport { Alert };\nexport type { AlertProps };\n","import type { AlertProps } from './Alert';\nimport type { HTMLAttributes } from 'react';\n\nimport { ExpandMore } from '@launchpad-ui/icons';\nimport { cx } from 'classix';\nimport { useRef, useState } from 'react';\n\nimport { Alert } from './Alert';\nimport styles from './styles/CollapsibleAlert.module.css';\n\ntype CollapsibleAlertProps = HTMLAttributes<HTMLElement> & {\n  /**\n   * Passing in one of `info`, `success`, `warning`, `error`, `striped`\n   * displays the style and icon pair associated with the variant.\n   * The default is info.\n   */\n  kind?: AlertProps['kind'];\n  /**\n   * The message to pass into the Alert.\n   */\n  message: string | JSX.Element;\n  'data-test-id'?: string;\n};\n\nconst CollapsibleAlert = ({\n  children,\n  className,\n  kind,\n  message,\n  'data-test-id': testId = 'collapsible-alert',\n  ...rest\n}: CollapsibleAlertProps) => {\n  const [alertCollapsed, setAlertCollapsed] = useState(true);\n  const buttonRef = useRef(null);\n\n  const classes = cx(styles['CollapsibleAlert--container'], className);\n\n  const toggleOpen = () => {\n    setAlertCollapsed(!alertCollapsed);\n  };\n\n  return (\n    <div className={classes} data-test-id={testId} {...rest}>\n      <Alert kind={kind} size=\"medium\" className={styles.CollapsibleAlert}>\n        <div>{message}</div>\n        <button\n          aria-expanded={!alertCollapsed}\n          aria-haspopup\n          ref={buttonRef}\n          onClick={toggleOpen}\n          data-test-id={`${testId}-button`}\n          className={styles['CollapsibleAlert-button']}\n        >\n          {alertCollapsed ? (\n            <>\n              <span>Show more</span>\n              <ExpandMore className={styles['CollapsibleAlert--icon']} size=\"medium\" />\n            </>\n          ) : (\n            <>\n              <span>Show less</span>\n              <ExpandMore className={styles['CollapsibleAlert--icon']} size=\"medium\" />\n            </>\n          )}\n        </button>\n        <div className={styles['CollapsibleAlert--contentContainer']}>\n          {!alertCollapsed && <>{children}</>}\n        </div>\n      </Alert>\n    </div>\n  );\n};\n\nexport { CollapsibleAlert };\nexport type { CollapsibleAlertProps };\n"],"names":["useState","styles","cx","jsxs","jsx","StatusIcon","IconButton","Close","useRef","Fragment","ExpandMore"],"mappings":"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"}