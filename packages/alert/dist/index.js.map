{"version":3,"file":"index.js","sources":["../src/Alert.tsx","../src/CollapsibleAlert.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from 'react';\n\nimport { IconButton } from '@launchpad-ui/button';\nimport { Close, StatusIcon } from '@launchpad-ui/icons';\nimport { cx } from 'classix';\nimport { useState } from 'react';\n\nimport styles from './styles/Alert.module.css';\n\ntype AlertProps = HTMLAttributes<HTMLDivElement> & {\n  'data-test-id'?: string;\n  /**\n   * When true, shows the compact Alert variant,\n   * width of Alert fits content.\n   */\n  compact?: boolean;\n  /**\n   * When true, shows Alert without background/border colors.\n   */\n  isInline?: boolean;\n  /**\n   * Passing in one of `info`, `success`, `warning`, `error`\n   * displays the style and icon pair associated with the variant.\n   * The default is info.\n   */\n  kind?: 'info' | 'success' | 'warning' | 'error';\n  /**\n   * Passing in one of `small`, `medium`\n   * displays either a small or medium Alert.\n   * The default is medium.\n   */\n  size?: 'small' | 'medium';\n  /**\n   * When true, shows the wide Alert variant, adds top margin,\n   * sets width to 86% (why?).\n   */\n  wide?: boolean;\n\n  /**\n   * When true, shows the close button. When button is clicked, the Alert\n   * is removed.\n   */\n  dismissible?: boolean;\n\n  /**\n   * Function fired on click of close button.\n   */\n  onDismiss?(): void;\n\n  /**\n   * When true no icon is rendered\n   */\n  noIcon?: boolean;\n\n  header?: ReactNode;\n};\n\nconst Alert = ({\n  children,\n  className,\n  compact,\n  isInline,\n  kind = 'info',\n  size = 'medium',\n  wide,\n  dismissible,\n  onDismiss,\n  noIcon,\n  header,\n  'data-test-id': testId = 'alert',\n  ...rest\n}: AlertProps) => {\n  const [dismissed, setDismissed] = useState(false);\n\n  const defaultClasses = `${styles.Alert} ${styles[`Alert--${kind}`]}`;\n  const sizeClass = size === 'small' && styles[`Alert--${size}`];\n  const classes = cx(\n    defaultClasses,\n    className,\n    isInline ? styles['Alert--inline'] : styles['Alert--bordered'],\n    sizeClass,\n    compact && styles['Alert--compact'],\n    wide && styles['Alert--wide']\n  );\n\n  const handleDismissClicked = () => {\n    if (onDismiss) {\n      onDismiss();\n    }\n\n    setDismissed(true);\n  };\n\n  if (dismissed) {\n    return null;\n  }\n\n  return (\n    <div\n      {...rest}\n      className={classes}\n      data-test-id={testId}\n      role={['info', 'success'].includes(kind) ? 'status' : 'alert'}\n    >\n      {!noIcon && (\n        <StatusIcon\n          kind={kind}\n          className={styles['Alert-icon']}\n          size={size}\n          data-test-id={`${testId}-status-icon`}\n        />\n      )}\n      <div className={styles['Alert-content']}>\n        {header && (\n          <h4 className={styles['Alert-heading']} data-test-id={`${testId}-header`}>\n            {header}\n          </h4>\n        )}\n        <div>{children}</div>\n      </div>\n      {dismissible && (\n        <IconButton\n          aria-label=\"Close this alert.\"\n          size=\"small\"\n          className={styles['Alert-close']}\n          icon={<Close size=\"small\" />}\n          kind=\"close\"\n          onClick={handleDismissClicked}\n          data-test-id={testId ? `${testId}-dismiss-button` : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport { Alert };\nexport type { AlertProps };\n","import type { AlertProps } from './Alert';\nimport type { HTMLAttributes } from 'react';\n\nimport { ExpandMore } from '@launchpad-ui/icons';\nimport { cx } from 'classix';\nimport { useRef, useState } from 'react';\n\nimport { Alert } from './Alert';\nimport styles from './styles/CollapsibleAlert.module.css';\n\ntype CollapsibleAlertProps = HTMLAttributes<HTMLElement> & {\n  /**\n   * Passing in one of `info`, `success`, `warning`, `error`, `striped`\n   * displays the style and icon pair associated with the variant.\n   * The default is info.\n   */\n  kind?: AlertProps['kind'];\n  /**\n   * The message to pass into the Alert.\n   */\n  message: string | JSX.Element;\n  'data-test-id'?: string;\n};\n\nconst CollapsibleAlert = ({\n  children,\n  className,\n  kind,\n  message,\n  'data-test-id': testId = 'collapsible-alert',\n  ...rest\n}: CollapsibleAlertProps) => {\n  const [alertCollapsed, setAlertCollapsed] = useState(true);\n  const buttonRef = useRef(null);\n\n  const classes = cx(styles['CollapsibleAlert--container'], className);\n\n  const toggleOpen = () => {\n    setAlertCollapsed(!alertCollapsed);\n  };\n\n  return (\n    <div className={classes} data-test-id={testId} {...rest}>\n      <Alert kind={kind} size=\"medium\" className={styles.CollapsibleAlert}>\n        <div>{message}</div>\n        <button\n          aria-expanded={!alertCollapsed}\n          aria-haspopup\n          ref={buttonRef}\n          onClick={toggleOpen}\n          data-test-id={`${testId}-button`}\n          className={styles['CollapsibleAlert-button']}\n        >\n          {alertCollapsed ? (\n            <>\n              <span>Show more</span>\n              <ExpandMore className={styles['CollapsibleAlert--icon']} size=\"medium\" />\n            </>\n          ) : (\n            <>\n              <span>Show less</span>\n              <ExpandMore className={styles['CollapsibleAlert--icon']} size=\"medium\" />\n            </>\n          )}\n        </button>\n        <div className={styles['CollapsibleAlert--contentContainer']}>\n          {!alertCollapsed && <>{children}</>}\n        </div>\n      </Alert>\n    </div>\n  );\n};\n\nexport { CollapsibleAlert };\nexport type { CollapsibleAlertProps };\n"],"names":["Alert","children","className","compact","isInline","kind","size","wide","dismissible","onDismiss","noIcon","header","testId","rest","dismissed","setDismissed","useState","defaultClasses","styles","sizeClass","classes","cx","handleDismissClicked","includes","StatusIcon","_jsxs","_jsx","IconButton","Close","undefined","CollapsibleAlert","message","alertCollapsed","setAlertCollapsed","buttonRef","useRef","toggleOpen","_Fragment","ExpandMore"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,MAAMA,QAAQ,CAAC;AAAA,EACbC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC,OAAO;AAAA,EACPC,OAAO;AAAA,EACPC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACA,gBAAgBC,SAAS;AAAA,KACtBC;AACO,MAAM;AAChB,QAAM,CAACC,WAAWC,YAAY,IAAIC,eAAS,KAAK;AAEhD,QAAMC,iBAAkB,GAAEC,SAAOlB,SAASkB,SAAQ,UAASb;AAC3D,QAAMc,YAAYb,SAAS,WAAWY,SAAQ,UAASZ;AACvD,QAAMc,UAAUC,QAAAA,GACdJ,gBACAf,WACAE,WAAWc,SAAO,mBAAmBA,SAAO,oBAC5CC,WACAhB,WAAWe,SAAO,mBAClBX,QAAQW,SAAO,cAAc;AAG/B,QAAMI,uBAAuB,MAAM;AACjC,QAAIb,WAAW;AACF;IACb;AAEAM,iBAAa,IAAI;AAAA,EAAA;AAGnB,MAAID,WAAW;AACN,WAAA;AAAA,EACT;AAEA,yCACE,OAAA;AAAA,IAAA,GACMD;AAAAA,IACJ,WAAWO;AAAAA,IACX,gBAAcR;AAAAA,IACd,MAAM,CAAC,QAAQ,SAAS,EAAEW,SAASlB,IAAI,IAAI,WAAW;AAAA,IAAQ,UAAA,CAE7D,CAACK,yCACCc,MAAAA,YAAU;AAAA,MACT;AAAA,MACA,WAAWN,SAAO;AAAA,MAClB;AAAA,MACA,gBAAe,GAAEN;AAAAA,IAAAA,CAAqB,GAG1Ca,2BAAA,KAAA,OAAA;AAAA,MAAK,WAAWP,SAAO;AAAA,MAAiB,UAAA,CACrCP,UACCe,2BAAA,IAAA,MAAA;AAAA,QAAI,WAAWR,SAAO;AAAA,QAAkB,gBAAe,GAAEN;AAAAA,QAAgB,UACtED;AAAAA,MAAAA,CAAM,GAGXe,2BAAA,IAAA,OAAA;AAAA,QAAA;AAAA,MAAA,CAAqB,CAAA;AAAA,IAAA,CAAA,GAEtBlB,eACCkB,2BAAA,IAACC,mBAAU;AAAA,MACT,cAAW;AAAA,MACX,MAAK;AAAA,MACL,WAAWT,SAAO;AAAA,MAClB,qCAAOU,aAAK;AAAA,QAAC,MAAK;AAAA,MAAA,CAAW;AAAA,MAC7B,MAAK;AAAA,MACL,SAASN;AAAAA,MACT,gBAAcV,SAAU,GAAEA,0BAA0BiB;AAAAA,IAAAA,CAEvD,CAAA;AAAA,EAAA,CACG;AAEV;;;;;;;;;;AC7GA,MAAMC,mBAAmB,CAAC;AAAA,EACxB7B;AAAAA,EACAC;AAAAA,EACAG;AAAAA,EACA0B;AAAAA,EACA,gBAAgBnB,SAAS;AAAA,KACtBC;AACkB,MAAM;AAC3B,QAAM,CAACmB,gBAAgBC,iBAAiB,IAAIjB,eAAS,IAAI;AACnDkB,QAAAA,YAAYC,aAAO,IAAI;AAE7B,QAAMf,UAAUC,QAAAA,GAAGH,OAAO,gCAAgChB,SAAS;AAEnE,QAAMkC,aAAa,MAAM;AACvBH,sBAAkB,CAACD,cAAc;AAAA,EAAA;AAGnC,wCACE,OAAA;AAAA,IAAK,WAAWZ;AAAAA,IAAS,gBAAcR;AAAAA,IAAO,GAAKC;AAAAA,IAAI,0CACpD,OAAK;AAAA,MAAC;AAAA,MAAY,MAAK;AAAA,MAAS,WAAWK,OAAOY;AAAAA,MAAiB,UAClE,CAAAJ,2BAAA,IAAA,OAAA;AAAA,QAAA,UAAMK;AAAAA,MAAAA,CAAO,GACbL,2BAAA,IAAA,UAAA;AAAA,QACE,iBAAe,CAACM;AAAAA,QAChB,iBAAa;AAAA,QACb,KAAKE;AAAAA,QACL,SAASE;AAAAA,QACT,gBAAe,GAAExB;AAAAA,QACjB,WAAWM,OAAO;AAAA,QAA2B,UAE5Cc,iBACCP,2BAAA,KAAAY,qBAAA;AAAA,UAAA,UACE,CAAAX,2BAAA,IAAA,QAAA;AAAA,YAAA,UAAA;AAAA,UAAA,CAAsB,GACtBA,2BAAA,IAACY,kBAAU;AAAA,YAAC,WAAWpB,OAAO;AAAA,YAA2B,MAAK;AAAA,UAAA,CAAW,CAAA;AAAA,QAAA,CAAA,IAG3EO,2BAAA,KAAAY,qBAAA;AAAA,UAAA,UACE,CAAAX,2BAAA,IAAA,QAAA;AAAA,YAAA,UAAA;AAAA,UAAA,CAAsB,GACtBA,2BAAA,IAACY,kBAAU;AAAA,YAAC,WAAWpB,OAAO;AAAA,YAA2B,MAAK;AAAA,UAAA,CAAW,CAAA;AAAA,QAAA,CAAA;AAAA,MAAA,CAE5E,GAEHQ,2BAAA,IAAA,OAAA;AAAA,QAAK,WAAWR,OAAO;AAAA,QAAsC,UAC1D,CAACc,kBAAkBN,2BAAA,IAAAW,qBAAA;AAAA,UAAA;AAAA,QAAA,CAAW;AAAA,MAAA,CAC3B,CAAA;AAAA,IAAA,CAAA;AAAA,EAAA,CAEJ;AAEV;;;"}