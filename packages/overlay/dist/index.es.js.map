{"version":3,"file":"index.es.js","sources":["../src/Overlay.tsx"],"sourcesContent":["import type { KeyboardEvent, MouseEvent as ReactMouseEvent, ReactNode } from 'react';\n\nimport { Portal } from '@launchpad-ui/portal';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\ntype OverlayProps = {\n  isOpen: boolean;\n  isModal?: boolean;\n  canEscapeKeyClose?: boolean;\n  canOutsideClickClose?: boolean;\n  enforceFocus?: boolean;\n  lazy?: boolean;\n  onClose: (event: ReactMouseEvent | KeyboardEvent) => void;\n  children?: ReactNode;\n};\n\nconst Overlay = ({\n  isOpen,\n  lazy = true,\n  enforceFocus = true,\n  isModal = false,\n  canOutsideClickClose = true,\n  canEscapeKeyClose = true,\n  onClose,\n  children,\n}: OverlayProps) => {\n  const [hasEverOpened, setHasEverOpened] = useState(isOpen);\n  const containerElement = useRef<HTMLDivElement>(null);\n\n  const handleDocumentClick = useCallback(\n    (event: MouseEvent) => {\n      const eventTarget = event.target as Element;\n      const wasClickInOverlay =\n        containerElement.current && containerElement.current.contains(eventTarget);\n      // wasClickInBody accounts for clicks in portals within the popover, which are outside of the body and therefore not in the overlay\n      const wasClickInBody = !!eventTarget.closest('body');\n\n      if (isOpen && canOutsideClickClose && !wasClickInOverlay && wasClickInBody) {\n        typeof onClose === 'function' && onClose(event as unknown as ReactMouseEvent);\n      }\n    },\n    [canOutsideClickClose, isOpen, onClose]\n  );\n\n  const focusContainer = useCallback(() => {\n    requestAnimationFrame(() => {\n      if (!isOpen || containerElement.current === null || document.activeElement === null) {\n        return;\n      }\n\n      if (!containerElement.current.contains(document.activeElement)) {\n        const autofocusElement = containerElement.current.querySelector(\n          '[autofocus]'\n        ) as HTMLDivElement;\n        const tabbableElement = containerElement.current.querySelector(\n          '[tabindex]'\n        ) as HTMLDivElement;\n        if (autofocusElement) {\n          autofocusElement.focus();\n        } else if (tabbableElement) {\n          tabbableElement.focus();\n        }\n      }\n    });\n  }, [isOpen]);\n\n  const handleDocumentFocus = useCallback(\n    (event: Event) => {\n      const eventTarget = event.target as Element;\n\n      if (\n        enforceFocus &&\n        containerElement.current &&\n        !containerElement.current.contains(eventTarget)\n      ) {\n        event.stopImmediatePropagation();\n        focusContainer();\n      }\n    },\n    [enforceFocus, focusContainer]\n  );\n\n  const handleOverlayOpen = useCallback(() => {\n    if (canOutsideClickClose) {\n      document.addEventListener('mousedown', handleDocumentClick);\n    }\n\n    if (enforceFocus) {\n      document.addEventListener('focus', handleDocumentFocus, true);\n    }\n\n    if (isModal) {\n      document.body.classList.add('has-overlay');\n    }\n  }, [handleDocumentClick, handleDocumentFocus, canOutsideClickClose, enforceFocus, isModal]);\n\n  const handleOverlayClose = useCallback(() => {\n    document.removeEventListener('mousedown', handleDocumentClick);\n    document.removeEventListener('focus', handleDocumentFocus, true);\n\n    if (isModal) {\n      document.body.classList.remove('has-overlay');\n    }\n  }, [handleDocumentClick, handleDocumentFocus, isModal]);\n\n  useEffect(() => {\n    if (isOpen) {\n      handleOverlayOpen();\n    } else {\n      handleOverlayClose();\n    }\n\n    setHasEverOpened(hasEverOpened || isOpen);\n\n    return () => {\n      handleOverlayClose();\n    };\n  }, [isOpen, handleOverlayOpen, handleOverlayClose, hasEverOpened]);\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (canEscapeKeyClose && event.key === 'Escape') {\n      typeof onClose === 'function' && onClose(event);\n      event.preventDefault();\n    }\n  };\n\n  if (lazy && !hasEverOpened) {\n    return null;\n  }\n\n  return (\n    <Portal onKeyDown={handleKeyDown} ref={containerElement}>\n      {isOpen ? children : null}\n    </Portal>\n  );\n};\n\nexport { Overlay };\nexport type { OverlayProps };\n"],"names":[],"mappings":";;;AAgBA,MAAM,UAAU,CAAC;AAAA,EACf;AAAA,EACA,OAAO;AAAA,EACP,eAAe;AAAA,EACf,UAAU;AAAA,EACV,uBAAuB;AAAA,EACvB,oBAAoB;AAAA,EACpB;AAAA,EACA;AACF,MAAoB;AAClB,QAAM,CAAC,eAAe,gBAAgB,IAAI,SAAS,MAAM;AACnD,QAAA,mBAAmB,OAAuB,IAAI;AAEpD,QAAM,sBAAsB;AAAA,IAC1B,CAAC,UAAsB;AACrB,YAAM,cAAc,MAAM;AAC1B,YAAM,oBACJ,iBAAiB,WAAW,iBAAiB,QAAQ,SAAS,WAAW;AAE3E,YAAM,iBAAiB,CAAC,CAAC,YAAY,QAAQ,MAAM;AAEnD,UAAI,UAAU,wBAAwB,CAAC,qBAAqB,gBAAgB;AACnE,eAAA,YAAY,cAAc,QAAQ,KAAmC;AAAA,MAC9E;AAAA,IACF;AAAA,IACA,CAAC,sBAAsB,QAAQ,OAAO;AAAA,EAAA;AAGlC,QAAA,iBAAiB,YAAY,MAAM;AACvC,0BAAsB,MAAM;AAC1B,UAAI,CAAC,UAAU,iBAAiB,YAAY,QAAQ,SAAS,kBAAkB,MAAM;AACnF;AAAA,MACF;AAEA,UAAI,CAAC,iBAAiB,QAAQ,SAAS,SAAS,aAAa,GAAG;AACxD,cAAA,mBAAmB,iBAAiB,QAAQ;AAAA,UAChD;AAAA,QAAA;AAEI,cAAA,kBAAkB,iBAAiB,QAAQ;AAAA,UAC/C;AAAA,QAAA;AAEF,YAAI,kBAAkB;AACpB,2BAAiB,MAAM;AAAA,mBACd,iBAAiB;AAC1B,0BAAgB,MAAM;AAAA,QACxB;AAAA,MACF;AAAA,IAAA,CACD;AAAA,EAAA,GACA,CAAC,MAAM,CAAC;AAEX,QAAM,sBAAsB;AAAA,IAC1B,CAAC,UAAiB;AAChB,YAAM,cAAc,MAAM;AAGxB,UAAA,gBACA,iBAAiB,WACjB,CAAC,iBAAiB,QAAQ,SAAS,WAAW,GAC9C;AACA,cAAM,yBAAyB;AAChB;MACjB;AAAA,IACF;AAAA,IACA,CAAC,cAAc,cAAc;AAAA,EAAA;AAGzB,QAAA,oBAAoB,YAAY,MAAM;AAC1C,QAAI,sBAAsB;AACf,eAAA,iBAAiB,aAAa,mBAAmB;AAAA,IAC5D;AAEA,QAAI,cAAc;AACP,eAAA,iBAAiB,SAAS,qBAAqB,IAAI;AAAA,IAC9D;AAEA,QAAI,SAAS;AACF,eAAA,KAAK,UAAU,IAAI,aAAa;AAAA,IAC3C;AAAA,EAAA,GACC,CAAC,qBAAqB,qBAAqB,sBAAsB,cAAc,OAAO,CAAC;AAEpF,QAAA,qBAAqB,YAAY,MAAM;AAClC,aAAA,oBAAoB,aAAa,mBAAmB;AACpD,aAAA,oBAAoB,SAAS,qBAAqB,IAAI;AAE/D,QAAI,SAAS;AACF,eAAA,KAAK,UAAU,OAAO,aAAa;AAAA,IAC9C;AAAA,EACC,GAAA,CAAC,qBAAqB,qBAAqB,OAAO,CAAC;AAEtD,YAAU,MAAM;AACd,QAAI,QAAQ;AACQ;IAAA,OACb;AACc;IACrB;AAEA,qBAAiB,iBAAiB,MAAM;AAExC,WAAO,MAAM;AACQ;IAAA;AAAA,KAEpB,CAAC,QAAQ,mBAAmB,oBAAoB,aAAa,CAAC;AAE3D,QAAA,gBAAgB,CAAC,UAAyB;AAC1C,QAAA,qBAAqB,MAAM,QAAQ,UAAU;AACxC,aAAA,YAAY,cAAc,QAAQ,KAAK;AAC9C,YAAM,eAAe;AAAA,IACvB;AAAA,EAAA;AAGE,MAAA,QAAQ,CAAC,eAAe;AACnB,WAAA;AAAA,EACT;AAGE,SAAA,oBAAC,UAAO,WAAW,eAAe,KAAK,kBACpC,UAAA,SAAS,WAAW,KACvB,CAAA;AAEJ;"}