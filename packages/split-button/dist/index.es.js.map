{"version":3,"file":"index.es.js","sources":["../src/context.ts","../src/SplitButton.tsx","../src/SplitButtonDropdown.tsx","../src/SplitButtonDropdownButton.tsx","../src/SplitButtonMainButton.tsx"],"sourcesContent":["import type { ButtonProps } from '@launchpad-ui/button';\n\nimport { createContext } from 'react';\n\ntype SplitButtonContextState = {\n  disabled?: boolean;\n  kind?: ButtonProps['kind'];\n  size?: ButtonProps['size'];\n};\n\nconst SplitButtonContext = createContext<SplitButtonContextState>({\n  disabled: false,\n  kind: 'default',\n  size: 'normal',\n});\n\nexport { SplitButtonContext };\nexport type { SplitButtonContextState };\n","import type { ButtonProps } from '@launchpad-ui/button';\nimport type { HTMLAttributes } from 'react';\n\nimport { cx } from 'classix';\n\nimport { SplitButtonContext } from './context';\nimport './styles/SplitButton.css';\n\ntype SplitButtonProps = HTMLAttributes<HTMLDivElement> & {\n  kind?: Extract<ButtonProps['kind'], 'primary' | 'default'>;\n  size?: ButtonProps['size'];\n  disabled?: boolean;\n  'data-test-id'?: string;\n};\n\nconst SplitButton = ({\n  disabled,\n  kind,\n  size,\n  children,\n  className,\n  'data-test-id': testId = 'split-button',\n  ...rest\n}: SplitButtonProps) => {\n  return (\n    <SplitButtonContext.Provider value={{ disabled: !!disabled, kind, size }}>\n      <div {...rest} className={cx('SplitButton', className)} data-test-id={testId}>\n        {children}\n      </div>\n    </SplitButtonContext.Provider>\n  );\n};\n\nSplitButton.displayName = 'SplitButton';\n\nexport { SplitButton };\nexport type { SplitButtonProps };\n","import type { DropdownProps } from '@launchpad-ui/dropdown';\n\nimport { Dropdown } from '@launchpad-ui/dropdown';\nimport { useContext } from 'react';\n\nimport { SplitButtonContext } from './context';\nimport './styles/SplitButton.css';\n\ntype SplitButtonDropdownProps = Omit<\n  DropdownProps<string | number | object>,\n  'enableArrow' | 'restrictWidth'\n>;\n\nconst SplitButtonDropdown = ({\n  disabled,\n  children,\n  placement = 'bottom-end',\n  'data-test-id': testId = 'split-button-dropdown',\n  ...rest\n}: SplitButtonDropdownProps) => {\n  const { disabled: parentDisabled } = useContext(SplitButtonContext);\n\n  const isDisabled = parentDisabled || disabled;\n\n  return (\n    <Dropdown\n      {...rest}\n      placement={placement}\n      enableArrow={false}\n      restrictWidth={false}\n      disabled={isDisabled}\n      data-test-id={testId}\n    >\n      {children}\n    </Dropdown>\n  );\n};\n\nexport { SplitButtonDropdown };\nexport type { SplitButtonDropdownProps };\n","import type { DropdownButtonProps } from '@launchpad-ui/dropdown';\n\nimport { DropdownButton } from '@launchpad-ui/dropdown';\nimport { cx } from 'classix';\nimport { forwardRef, useContext, useMemo } from 'react';\n\nimport { SplitButtonContext } from './context';\nimport './styles/SplitButton.css';\n\ntype SplitButtonDropdownButtonProps = Omit<DropdownButtonProps, 'kind' | 'size' | 'children'>;\n\nconst SplitButtonDropdownButton = forwardRef<HTMLButtonElement, SplitButtonDropdownButtonProps>(\n  (props, ref) => {\n    const {\n      disabled,\n      className,\n      'aria-label': ariaLabel,\n      'data-test-id': testId = 'split-button-dropdown-button',\n      ...rest\n    } = props;\n    const { disabled: parentDisabled, kind, size } = useContext(SplitButtonContext);\n\n    const isDisabled = parentDisabled || disabled;\n\n    const label = useMemo(() => {\n      let value = 'More options';\n\n      if (isDisabled) {\n        value = 'These options are unavailable';\n      } else if (ariaLabel) {\n        value = ariaLabel;\n      }\n\n      return value;\n    }, [ariaLabel, isDisabled]);\n\n    return (\n      <DropdownButton\n        {...rest}\n        ref={ref}\n        className={cx('SplitButton-drop', className)}\n        kind={kind}\n        disabled={isDisabled}\n        size={size}\n        data-test-id={testId}\n        aria-label={label}\n      />\n    );\n  }\n);\n\nSplitButtonDropdownButton.displayName = 'SplitButtonDropdownButton';\n\nexport { SplitButtonDropdownButton };\nexport type { SplitButtonDropdownButtonProps };\n","import type { ButtonProps } from '@launchpad-ui/button';\n\nimport { Button } from '@launchpad-ui/button';\nimport { cx } from 'classix';\nimport { forwardRef, useContext, useMemo } from 'react';\n\nimport { SplitButtonContext } from './context';\nimport './styles/SplitButton.css';\n\ntype SplitButtonMainButtonProps = Omit<ButtonProps, 'kind' | 'size'>;\n\nconst SplitButtonMainButton = forwardRef<HTMLButtonElement, SplitButtonMainButtonProps>(\n  (props, ref) => {\n    const {\n      disabled,\n      children,\n      className,\n      'aria-label': ariaLabel,\n      'data-test-id': testId = 'split-button-main-button',\n      ...rest\n    } = props;\n    const { disabled: parentDisabled, kind, size } = useContext(SplitButtonContext);\n\n    const isDisabled = parentDisabled || disabled;\n\n    const classes = cx('SplitButton-main', className);\n\n    const label = useMemo(() => {\n      let value;\n\n      if (isDisabled) {\n        value = 'These options are unavailable';\n      } else if (ariaLabel) {\n        value = ariaLabel;\n      } else {\n        value = 'More options';\n      }\n\n      return value;\n    }, [ariaLabel, isDisabled]);\n\n    return (\n      <Button\n        className={classes}\n        disabled={isDisabled}\n        kind={kind}\n        size={size}\n        aria-label={label}\n        ref={ref}\n        data-test-id={testId}\n        {...rest}\n      >\n        {children}\n      </Button>\n    );\n  }\n);\n\nSplitButtonMainButton.displayName = 'SplitButtonMainButton';\n\nexport { SplitButtonMainButton };\nexport type { SplitButtonMainButtonProps };\n"],"names":["SplitButton","disabled","kind","size","children","className","testId","rest","_jsx","cx","displayName","SplitButtonDropdown","placement","parentDisabled","useContext","SplitButtonContext","isDisabled","SplitButtonDropdownButton","forwardRef","props","ref","ariaLabel","label","useMemo","value","SplitButtonMainButton","classes"],"mappings":"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"}