{"version":3,"file":"index.js","sources":["../src/context.ts","../src/SplitButton.tsx","../src/SplitButtonDropdown.tsx","../src/SplitButtonDropdownButton.tsx","../src/SplitButtonMainButton.tsx"],"sourcesContent":["import type { ButtonProps } from '@launchpad-ui/button';\n\nimport { createContext } from 'react';\n\ntype SplitButtonContextState = {\n  disabled?: boolean;\n  kind?: ButtonProps['kind'];\n  size?: ButtonProps['size'];\n};\n\nconst SplitButtonContext = createContext<SplitButtonContextState>({\n  disabled: false,\n  kind: 'default',\n  size: 'normal',\n});\n\nexport { SplitButtonContext };\nexport type { SplitButtonContextState };\n","import type { ButtonProps } from '@launchpad-ui/button';\nimport type { HTMLAttributes } from 'react';\n\nimport { cx } from 'classix';\n\nimport { SplitButtonContext } from './context';\nimport './styles/SplitButton.css';\n\ntype SplitButtonProps = HTMLAttributes<HTMLDivElement> & {\n  kind?: Extract<ButtonProps['kind'], 'primary' | 'default'>;\n  size?: ButtonProps['size'];\n  disabled?: boolean;\n  'data-test-id'?: string;\n};\n\nconst SplitButton = ({\n  disabled,\n  kind,\n  size,\n  children,\n  className,\n  'data-test-id': testId = 'split-button',\n  ...rest\n}: SplitButtonProps) => {\n  return (\n    <SplitButtonContext.Provider value={{ disabled: !!disabled, kind, size }}>\n      <div {...rest} className={cx('SplitButton', className)} data-test-id={testId}>\n        {children}\n      </div>\n    </SplitButtonContext.Provider>\n  );\n};\n\nSplitButton.displayName = 'SplitButton';\n\nexport { SplitButton };\nexport type { SplitButtonProps };\n","import type { DropdownProps } from '@launchpad-ui/dropdown';\n\nimport { Dropdown } from '@launchpad-ui/dropdown';\nimport { useContext } from 'react';\n\nimport { SplitButtonContext } from './context';\nimport './styles/SplitButton.css';\n\ntype SplitButtonDropdownProps = Omit<\n  DropdownProps<string | number | object>,\n  'enableArrow' | 'restrictWidth'\n>;\n\nconst SplitButtonDropdown = ({\n  disabled,\n  children,\n  placement = 'bottom-end',\n  'data-test-id': testId = 'split-button-dropdown',\n  ...rest\n}: SplitButtonDropdownProps) => {\n  const { disabled: parentDisabled } = useContext(SplitButtonContext);\n\n  const isDisabled = parentDisabled || disabled;\n\n  return (\n    <Dropdown\n      {...rest}\n      placement={placement}\n      enableArrow={false}\n      restrictWidth={false}\n      disabled={isDisabled}\n      data-test-id={testId}\n    >\n      {children}\n    </Dropdown>\n  );\n};\n\nexport { SplitButtonDropdown };\nexport type { SplitButtonDropdownProps };\n","import type { DropdownButtonProps } from '@launchpad-ui/dropdown';\n\nimport { DropdownButton } from '@launchpad-ui/dropdown';\nimport { cx } from 'classix';\nimport { forwardRef, useContext, useMemo } from 'react';\n\nimport { SplitButtonContext } from './context';\nimport './styles/SplitButton.css';\n\ntype SplitButtonDropdownButtonProps = Omit<DropdownButtonProps, 'kind' | 'size' | 'children'>;\n\nconst SplitButtonDropdownButton = forwardRef<HTMLButtonElement, SplitButtonDropdownButtonProps>(\n  (props, ref) => {\n    const {\n      disabled,\n      className,\n      'aria-label': ariaLabel,\n      'data-test-id': testId = 'split-button-dropdown-button',\n      ...rest\n    } = props;\n    const { disabled: parentDisabled, kind, size } = useContext(SplitButtonContext);\n\n    const isDisabled = parentDisabled || disabled;\n\n    const label = useMemo(() => {\n      let value = 'More options';\n\n      if (isDisabled) {\n        value = 'These options are unavailable';\n      } else if (ariaLabel) {\n        value = ariaLabel;\n      }\n\n      return value;\n    }, [ariaLabel, isDisabled]);\n\n    return (\n      <DropdownButton\n        {...rest}\n        ref={ref}\n        className={cx('SplitButton-drop', className)}\n        kind={kind}\n        disabled={isDisabled}\n        size={size}\n        data-test-id={testId}\n        aria-label={label}\n      />\n    );\n  }\n);\n\nSplitButtonDropdownButton.displayName = 'SplitButtonDropdownButton';\n\nexport { SplitButtonDropdownButton };\nexport type { SplitButtonDropdownButtonProps };\n","import type { ButtonProps } from '@launchpad-ui/button';\n\nimport { Button } from '@launchpad-ui/button';\nimport { cx } from 'classix';\nimport { forwardRef, useContext, useMemo } from 'react';\n\nimport { SplitButtonContext } from './context';\nimport './styles/SplitButton.css';\n\ntype SplitButtonMainButtonProps = Omit<ButtonProps, 'kind' | 'size'>;\n\nconst SplitButtonMainButton = forwardRef<HTMLButtonElement, SplitButtonMainButtonProps>(\n  (props, ref) => {\n    const {\n      disabled,\n      children,\n      className,\n      'aria-label': ariaLabel,\n      'data-test-id': testId = 'split-button-main-button',\n      ...rest\n    } = props;\n    const { disabled: parentDisabled, kind, size } = useContext(SplitButtonContext);\n\n    const isDisabled = parentDisabled || disabled;\n\n    const classes = cx('SplitButton-main', className);\n\n    const label = useMemo(() => {\n      let value;\n\n      if (isDisabled) {\n        value = 'These options are unavailable';\n      } else if (ariaLabel) {\n        value = ariaLabel;\n      } else {\n        value = 'More options';\n      }\n\n      return value;\n    }, [ariaLabel, isDisabled]);\n\n    return (\n      <Button\n        className={classes}\n        disabled={isDisabled}\n        kind={kind}\n        size={size}\n        aria-label={label}\n        ref={ref}\n        data-test-id={testId}\n        {...rest}\n      >\n        {children}\n      </Button>\n    );\n  }\n);\n\nSplitButtonMainButton.displayName = 'SplitButtonMainButton';\n\nexport { SplitButtonMainButton };\nexport type { SplitButtonMainButtonProps };\n"],"names":["createContext","jsx","cx","useContext","Dropdown","forwardRef","useMemo","DropdownButton","Button"],"mappings":"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"}