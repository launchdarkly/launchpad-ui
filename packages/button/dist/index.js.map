{"version":3,"file":"index.js","sources":["../src/Button.tsx","../src/ButtonGroup.tsx","../src/UploadButton.tsx","../src/IconButton.tsx"],"sourcesContent":["import type { IconProps } from '@launchpad-ui/icons';\nimport type {\n  ButtonHTMLAttributes,\n  ElementType,\n  KeyboardEventHandler,\n  MouseEvent,\n  ReactElement,\n  ReactNode,\n} from 'react';\n\nimport { Slot } from '@radix-ui/react-slot';\nimport { cx } from 'classix';\nimport { isValidElement, cloneElement, forwardRef, memo } from 'react';\n\nimport './styles/Button.css';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n  isLoading?: boolean;\n  loadingText?: string | JSX.Element;\n  size?: 'tiny' | 'small' | 'normal' | 'big';\n  kind?: 'default' | 'primary' | 'destructive' | 'minimal' | 'link' | 'close';\n  fit?: boolean;\n  disabled?: boolean;\n  icon?: ReactElement<IconProps>;\n  renderIconFirst?: boolean;\n  asChild?: boolean;\n  'data-test-id'?: string;\n};\n\nconst ButtonComponent = forwardRef<HTMLButtonElement, ButtonProps>((props, ref) => {\n  const {\n    icon,\n    children,\n    className,\n    size,\n    fit,\n    kind = 'default',\n    isLoading = false,\n    loadingText,\n    renderIconFirst = false,\n    disabled = false,\n    asChild = false,\n    onKeyDown,\n    onClick,\n    type = 'button',\n    'data-test-id': testId = 'button',\n    ...rest\n  } = props;\n\n  const Component: ElementType = asChild ? Slot : 'button';\n\n  const classes = cx(\n    'Button',\n    `Button--${kind}`,\n    disabled && 'Button--disabled',\n    size && `Button--${size}`,\n    fit && 'Button--fit',\n    className\n  );\n\n  const renderIcon =\n    icon &&\n    cloneElement(icon, {\n      key: 'icon',\n      size: icon.props.size || 'small',\n      'aria-hidden': true,\n      className: cx(icon.props.className, 'Button-icon'),\n    });\n\n  const getFinalChildren = (c: ReactNode) => [\n    renderIconFirst && renderIcon,\n    isLoading && <span key=\"text\">{loadingText || c}</span>,\n    !isLoading && c && <span key=\"text\">{c}</span>,\n    !renderIconFirst && renderIcon,\n    isLoading && <span key=\"spinner\">â€¦</span>,\n  ];\n\n  const renderChildren = () => {\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, undefined, getFinalChildren(children.props.children));\n    }\n\n    return getFinalChildren(children);\n  };\n\n  const isDisabled = disabled || isLoading;\n\n  const handleClick = (event: MouseEvent<HTMLAnchorElement> & MouseEvent<HTMLButtonElement>) => {\n    if (disabled) return event.preventDefault();\n\n    onClick && onClick(event);\n  };\n\n  const handleKeyDown: KeyboardEventHandler<HTMLButtonElement> = (event) => {\n    if (event.target instanceof HTMLAnchorElement) {\n      const spacebarKeys = ['Spacebar', ' '];\n\n      if (spacebarKeys.includes(event.key)) {\n        event.preventDefault();\n        const link = event.target as HTMLAnchorElement;\n        link.click();\n      }\n    }\n  };\n\n  return (\n    <Component\n      className={classes}\n      ref={ref}\n      onClick={handleClick}\n      onKeyDown={onKeyDown || handleKeyDown}\n      disabled={isDisabled}\n      type={type}\n      data-test-id={testId}\n      {...rest}\n    >\n      {renderChildren()}\n    </Component>\n  );\n});\n\nButtonComponent.displayName = 'Button';\n\nconst Button = memo(ButtonComponent);\n\nexport { Button };\nexport type { ButtonProps };\n","import type { HTMLAttributes } from 'react';\n\nimport { cx } from 'classix';\n\nimport './styles/ButtonGroup.css';\n\ntype ButtonGroupProps = HTMLAttributes<HTMLDivElement> & {\n  spacing?: 'compact' | 'normal' | 'large';\n  'data-test-id'?: string;\n};\n\nconst ButtonGroup = ({\n  spacing = 'normal',\n  className,\n  children,\n  'data-test-id': testId = 'button-group',\n  ...rest\n}: ButtonGroupProps) => {\n  const classes = cx('ButtonGroup', `ButtonGroup--${spacing}`, className);\n\n  return (\n    <div className={classes} data-test-id={testId} {...rest}>\n      {children}\n    </div>\n  );\n};\n\nexport { ButtonGroup };\nexport type { ButtonGroupProps };\n","import type { ButtonProps } from './Button';\nimport type { ChangeEventHandler, KeyboardEvent } from 'react';\n\nimport { cx } from 'classix';\nimport { useRef } from 'react';\n\nimport { Button } from './Button';\n\ntype UploadButtonProps = Omit<ButtonProps, 'onSelect'> & {\n  onSelect(file?: File | null): void;\n  maxSize: number;\n  accept?: string;\n  id: string;\n};\n\nconst UploadButton = ({\n  id,\n  className,\n  children,\n  disabled,\n  accept,\n  maxSize,\n  onSelect,\n  'data-test-id': testId = 'upload-button',\n  ...rest\n}: UploadButtonProps) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const classes = cx('UploadButton', className);\n\n  const handleClick = () => {\n    inputRef.current?.click();\n  };\n\n  const handleKeyDown = (event: KeyboardEvent<Element>) => {\n    const actionKeys = ['Spacebar', ' ', 'Enter'];\n\n    if (actionKeys.includes(event.key)) {\n      event.preventDefault();\n      inputRef.current?.click();\n    }\n  };\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    let file;\n\n    if (event) {\n      const e = event;\n      file = e.target.files?.[0];\n    }\n\n    if (file && file.size > maxSize) {\n      return;\n    }\n\n    event?.persist();\n    onSelect(file);\n\n    if (inputRef.current) {\n      inputRef.current.value = '';\n    }\n  };\n\n  return (\n    <span className={classes} data-test-id={testId}>\n      <input\n        ref={inputRef}\n        className=\"UploadButton-input\"\n        id={id}\n        style={{ display: 'none' }}\n        type=\"file\"\n        onChange={handleChange}\n        disabled={disabled}\n        accept={accept}\n        data-test-id=\"upload-button-input\"\n      />\n      <label htmlFor={id} className=\"UploadButton-label\">\n        <Button\n          {...rest}\n          disabled={disabled}\n          tabIndex={disabled ? -1 : 0}\n          role=\"button\"\n          onKeyDown={handleKeyDown}\n          onClick={handleClick}\n        >\n          {children}\n        </Button>\n      </label>\n    </span>\n  );\n};\n\nexport { UploadButton };\nexport type { UploadButtonProps };\n","import type { IconProps } from '@launchpad-ui/icons';\nimport type {\n  ButtonHTMLAttributes,\n  ElementType,\n  KeyboardEventHandler,\n  MouseEvent,\n  ReactElement,\n} from 'react';\n\nimport { Slot } from '@radix-ui/react-slot';\nimport { cx } from 'classix';\nimport { isValidElement, cloneElement, forwardRef, memo } from 'react';\n\nimport './styles/Button.css';\n\ntype IconButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\n  kind?: 'default' | 'primary' | 'destructive' | 'minimal' | 'close';\n  icon: ReactElement<IconProps>;\n  size?: 'small' | 'normal';\n  'aria-label': string;\n  asChild?: boolean;\n  'data-test-id'?: string;\n};\n\nconst IconButtonComponent = forwardRef<HTMLButtonElement, IconButtonProps>((props, ref) => {\n  const {\n    icon,\n    children,\n    className,\n    size = 'normal',\n    kind = 'minimal',\n    disabled = false,\n    asChild = false,\n    onKeyDown,\n    onClick,\n    type = 'button',\n    'data-test-id': testId = 'icon-button',\n    ...rest\n  } = props;\n\n  const Component: ElementType = asChild ? Slot : 'button';\n\n  const classes = cx(\n    'IconButton',\n    'Button',\n    'Button--icon',\n    `Button--${kind}`,\n    disabled && 'Button--disabled',\n    size && `Button--${size}`,\n    className\n  );\n\n  const clonedIcon = cloneElement(icon, {\n    key: 'icon',\n    size: icon.props.size || 'medium',\n    'aria-hidden': true,\n    className: cx(icon.props.className, 'Button-icon'),\n  });\n\n  const renderChildren = () => {\n    if (asChild && isValidElement(children)) {\n      return cloneElement(children, undefined, clonedIcon);\n    }\n\n    return clonedIcon;\n  };\n\n  const handleClick = (event: MouseEvent<HTMLAnchorElement> & MouseEvent<HTMLButtonElement>) => {\n    if (disabled) return event.preventDefault();\n\n    onClick && onClick(event);\n  };\n\n  const handleKeyDown: KeyboardEventHandler<HTMLButtonElement> = (event) => {\n    if (event.target instanceof HTMLAnchorElement) {\n      const spacebarKeys = ['Spacebar', ' '];\n\n      if (spacebarKeys.includes(event.key)) {\n        event.preventDefault();\n        const link = event.target as HTMLAnchorElement;\n        link.click();\n      }\n    }\n  };\n\n  return (\n    <Component\n      className={classes}\n      ref={ref}\n      onClick={handleClick}\n      disabled={disabled}\n      onKeyDown={onKeyDown || handleKeyDown}\n      type={type}\n      data-test-id={testId}\n      {...rest}\n    >\n      {renderChildren()}\n    </Component>\n  );\n});\n\nIconButtonComponent.displayName = 'IconButton';\n\nconst IconButton = memo(IconButtonComponent);\n\nexport { IconButton };\nexport type { IconButtonProps };\n"],"names":["ButtonComponent","forwardRef","props","ref","icon","children","className","size","fit","kind","isLoading","loadingText","renderIconFirst","disabled","asChild","onKeyDown","onClick","type","testId","rest","Component","Slot","classes","cx","renderIcon","cloneElement","key","getFinalChildren","c","renderChildren","isValidElement","undefined","isDisabled","handleClick","event","preventDefault","handleKeyDown","target","HTMLAnchorElement","spacebarKeys","includes","link","click","displayName","Button","memo","ButtonGroup","spacing","UploadButton","id","accept","maxSize","onSelect","inputRef","useRef","current","actionKeys","handleChange","file","e","files","persist","value","_jsx","display","IconButtonComponent","clonedIcon","IconButton"],"mappings":"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"}