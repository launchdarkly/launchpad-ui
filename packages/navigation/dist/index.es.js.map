{"version":3,"file":"index.es.js","sources":["../src/NavigationContext.ts","../src/Nav.tsx","../src/utils.ts","../src/NavItem.tsx","../src/NavItemWithTooltip.tsx","../src/NavigationMenuDropdown.tsx","../src/NavigationList.tsx","../src/Navigation.tsx","../src/NavigationItem.tsx"],"sourcesContent":["import type { RefObject } from 'react';\n\nimport { createContext, useContext } from 'react';\n\ntype NavigationContextModel = {\n  shouldCollapse: boolean;\n  refs: {\n    wrapperRef: RefObject<HTMLDivElement>;\n    itemListRef: RefObject<HTMLDivElement>;\n  };\n};\n\nconst NavigationContext = createContext<NavigationContextModel | undefined>(undefined);\n\nconst useNavigationContext = () => {\n  const context = useContext(NavigationContext);\n\n  if (context === undefined) {\n    throw new Error('useNavigationContext must be used within a NavigationContext provider');\n  }\n\n  return context;\n};\n\nexport { NavigationContext, useNavigationContext };\nexport type { NavigationContextModel };\n","import type { HTMLAttributes, Ref } from 'react';\n\nimport { cx } from 'classix';\nimport { forwardRef } from 'react';\n\nimport styles from './styles/Navigation.module.css';\n\ntype NavBaseProps = HTMLAttributes<HTMLElement> & {\n  kind?: 'primary' | 'secondary';\n  innerRef?: Ref<HTMLDivElement>;\n  'data-test-id'?: string;\n};\n\nconst NavBase = ({\n  kind = 'primary',\n  className,\n  children,\n  innerRef,\n  'aria-label': ariaLabel,\n  'data-test-id': testId = 'nav',\n  ...rest\n}: NavBaseProps) => {\n  return (\n    <nav\n      {...rest}\n      aria-label={ariaLabel ?? `${kind} navigation`}\n      className={cx(styles.Nav, styles[`Nav--${kind}`], className)}\n      data-test-id={testId}\n      ref={innerRef}\n    >\n      {children}\n    </nav>\n  );\n};\n\ntype NavProps = Omit<NavBaseProps, 'innerRef'>;\n\nconst Nav = forwardRef<HTMLDivElement, NavBaseProps>((props, ref) => (\n  <NavBase {...props} innerRef={ref} />\n));\n\nNav.displayName = 'Nav';\n\nexport { Nav };\nexport type { NavProps };\n","import { useEffect, useState } from 'react';\n\nconst titlecase = (str: string) => {\n  return str\n    .toString()\n    .toLowerCase()\n    .replace(/\\b([a-z])/g, (ch) => ch.toUpperCase());\n};\n\nconst useMediaQuery = (query: string) => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n    const handleMediaChange = () => {\n      setMatches(media.matches);\n    };\n    media.addEventListener('change', handleMediaChange);\n    return () => media.addEventListener('change', handleMediaChange);\n  }, [matches, query]);\n\n  return matches;\n};\n\nexport { titlecase, useMediaQuery };\n","import type { ChipProps } from '@launchpad-ui/chip';\nimport type { MouseEvent } from 'react';\n\nimport { Chip } from '@launchpad-ui/chip';\nimport { cx } from 'classix';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nimport styles from './styles/Navigation.module.css';\nimport { titlecase } from './utils';\n\ntype NavItemProps = {\n  to: string | { pathname: string; search: string };\n  name: string;\n  end?: boolean;\n  onClick?(event: MouseEvent): void;\n  activeClassName?: string;\n  status?: ChipProps['kind'];\n  id?: string;\n  role?: string;\n  'data-test-id'?: string;\n};\n\nconst NavItem = ({\n  to,\n  name,\n  onClick,\n  status,\n  role,\n  end,\n  'data-test-id': testId = 'nav-item',\n  ...other\n}: NavItemProps) => {\n  const { pathname } = useLocation();\n  const selected = pathname === to ? 'true' : 'false';\n\n  return (\n    <NavLink\n      {...other}\n      end={end}\n      to={to}\n      className={({ isActive }) => cx(styles.NavItem, isActive && styles['is-active'])}\n      data-text={name}\n      onClick={onClick}\n      role={role}\n      data-nav-target=\"true\" // used by Navigation to check rendered width\n      data-test-id={testId}\n      aria-selected={role === 'tab' ? selected : undefined}\n    >\n      {status ? (\n        <div style={{ display: 'flex', alignItems: 'flex-end' }}>\n          <span className={styles['NavItem-name']}>{name}</span>\n          <Chip className={styles['NavItem-chip']} data-test-id=\"nav-item-chip\" kind={status}>\n            {titlecase(status)}\n          </Chip>\n        </div>\n      ) : (\n        <span className={styles['NavItem-name']}>{name}</span>\n      )}\n    </NavLink>\n  );\n};\n\nexport { NavItem };\nexport type { NavItemProps };\n","import type { Offset, PopoverPlacement } from '@launchpad-ui/popover';\nimport type { MouseEvent } from 'react';\n\nimport { Tooltip } from '@launchpad-ui/tooltip';\n\nimport { NavItem } from './NavItem';\nimport styles from './styles/Navigation.module.css';\n\ntype NavItemWithTooltipProps = {\n  to: string;\n  name: string;\n  end?: boolean;\n  tooltipContent?: string | JSX.Element;\n  tooltipPlacement?: PopoverPlacement;\n  tooltipOffset?: Offset;\n  onClick?(event: MouseEvent): void;\n  id?: string;\n  role?: string;\n  'aria-controls'?: string;\n  'data-test-id'?: string;\n};\n\nconst defaultContent = (\n  <>\n    Upgrade your plan to use this feature.\n    <br />\n    Click to learn more.\n  </>\n);\n\nconst NavItemWithTooltip = ({\n  to,\n  name,\n  tooltipContent = defaultContent,\n  onClick,\n  tooltipPlacement = 'top',\n  tooltipOffset,\n  role,\n  end,\n  id,\n  'aria-controls': ariaControls,\n  'data-test-id': testId = 'nav-item-with-tooltip',\n}: NavItemWithTooltipProps) => {\n  const centeredContent = <div className={styles['NavItem-tooltip']}>{tooltipContent}</div>;\n  return (\n    <Tooltip\n      content={centeredContent}\n      placement={tooltipPlacement}\n      offset={tooltipOffset}\n      allowBoundaryElementOverflow\n      targetClassName={styles['NavPopover-target']}\n      data-test-id={testId}\n    >\n      <NavItem\n        end={end}\n        to={to}\n        name={name}\n        onClick={onClick}\n        role={role}\n        id={id}\n        aria-controls={ariaControls}\n      />\n    </Tooltip>\n  );\n};\n\nexport { NavItemWithTooltip };\nexport type { NavItemWithTooltipProps };\n","import type { CollectionBase } from '@react-types/shared';\n\nimport { Chip } from '@launchpad-ui/chip';\nimport { Dropdown, DropdownButton } from '@launchpad-ui/dropdown';\nimport { Menu, MenuItem } from '@launchpad-ui/menu';\nimport { useListState } from '@react-stately/list';\nimport { NavLink } from 'react-router-dom';\n\nimport { titlecase } from './utils';\n\ntype NavigationMenuDropdownProps<T extends object> = CollectionBase<T> & {\n  title: string;\n};\n\nconst NavigationMenuDropdown = <T extends object>(props: NavigationMenuDropdownProps<T>) => {\n  const state = useListState(props);\n\n  return (\n    <Dropdown>\n      <DropdownButton data-test-id=\"navigation-menu-button\">{props.title}</DropdownButton>\n      <Menu>\n        {[...state.collection].map((item) => (\n          <MenuItem\n            key={item.key}\n            item={item.key}\n            component={NavLink}\n            to={item.props.to}\n            onClick={item.props.onClick}\n          >\n            <div style={{ display: 'flex', gap: 'var(--lp-spacing-300)', alignItems: 'center' }}>\n              <div>{item.props.name}</div>\n              {item.props.status ? (\n                <div>\n                  <Chip kind={item.props.status}>{titlecase(item.props.status)}</Chip>\n                </div>\n              ) : undefined}\n            </div>\n          </MenuItem>\n        ))}\n      </Menu>\n    </Dropdown>\n  );\n};\n\nexport { NavigationMenuDropdown };\nexport type { NavigationMenuDropdownProps };\n","import type { NavProps } from './Nav';\nimport type { CollectionBase } from '@react-types/shared';\n\nimport { useListState } from '@react-stately/list';\n\nimport { Nav } from './Nav';\nimport { NavItem } from './NavItem';\nimport { NavItemWithTooltip } from './NavItemWithTooltip';\nimport { useNavigationContext } from './NavigationContext';\nimport { NavigationMenuDropdown } from './NavigationMenuDropdown';\nimport styles from './styles/Navigation.module.css';\n\ntype NavigationListProps<T extends object> = CollectionBase<T> & {\n  title: string;\n  kind?: NavProps['kind'];\n};\n\nconst NavigationList = <T extends object>({\n  kind = 'primary',\n  title,\n  ...rest\n}: NavigationListProps<T>) => {\n  const state = useListState(rest);\n\n  const { shouldCollapse, refs } = useNavigationContext();\n\n  return (\n    <div className={styles['NavigationList-wrapper']} ref={refs.wrapperRef}>\n      {shouldCollapse ? (\n        <NavigationMenuDropdown title={title} aria-label={title} {...rest} />\n      ) : (\n        <Nav kind={kind} ref={refs.itemListRef}>\n          {[...state.collection].map((item) =>\n            item.props.tooltip ? (\n              <NavItemWithTooltip\n                key={item.key}\n                to={item.props.to}\n                id={item.props.id}\n                name={item.props.name}\n                role={item.props.role}\n                aria-controls={item.props['aria-controls']}\n                tooltipContent={\n                  typeof item.props.tooltip === 'boolean' ? undefined : item.props.tooltip\n                }\n                tooltipOffset={item.props.tooltipOffset}\n                tooltipPlacement={item.props.tooltipPlacement}\n                onClick={item.props.onClick}\n                end={item.props.end}\n              />\n            ) : (\n              <NavItem\n                key={item.key}\n                to={item.props.to}\n                id={item.props.id}\n                name={item.props.name}\n                status={item.props.status}\n                role={item.props.role}\n                aria-controls={item.props['aria-controls']}\n                onClick={item.props.onClick}\n                end={item.props.end}\n              />\n            )\n          )}\n        </Nav>\n      )}\n    </div>\n  );\n};\n\nexport { NavigationList };\nexport type { NavigationListProps };\n","import type { NavProps } from './Nav';\nimport type { CollectionBase } from '@react-types/shared';\n\nimport { useResizeObserver, useValueEffect } from '@react-aria/utils';\nimport { cx } from 'classix';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { NavigationContext } from './NavigationContext';\nimport { NavigationList } from './NavigationList';\nimport styles from './styles/Navigation.module.css';\nimport { useMediaQuery } from './utils';\n\ntype NavigationProps<T extends object> = CollectionBase<T> & {\n  title: string;\n  kind?: NavProps['kind'];\n  role?: string;\n  'data-test-id'?: string;\n  className?: string;\n};\n\nconst Navigation = <T extends object>(props: NavigationProps<T>) => {\n  const { children, className, 'data-test-id': testId = 'navigation' } = props;\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const itemListRef = useRef<HTMLDivElement>(null);\n  const [shouldCollapse, setCollapse] = useValueEffect(false);\n\n  const isWideViewport = useMediaQuery('(min-width: 740px)');\n\n  // From react-spectrum: https://github.com/adobe/react-spectrum/blob/main/packages/%40react-spectrum/tabs/src/Tabs.tsx#L82\n  const checkShouldCollapse = useCallback(() => {\n    function computeShouldCollapse() {\n      if (!wrapperRef.current || !itemListRef.current) {\n        return false;\n      }\n\n      // This is where we're explicitly tied to NavItem\n      const tabs = itemListRef.current.querySelectorAll(\"[data-nav-target='true']\");\n      const lastTab = tabs[tabs.length - 1];\n\n      const containerEdge = wrapperRef.current.getBoundingClientRect().right;\n      const lastTabEdge = lastTab?.getBoundingClientRect().right;\n\n      return containerEdge < lastTabEdge;\n    }\n\n    setCollapse(function* () {\n      if (isWideViewport) {\n        yield false;\n        return;\n      }\n\n      // Make Tabs render in non-collapsed state\n      yield false;\n\n      // Compute if Tabs should collapse and update\n      yield computeShouldCollapse();\n    });\n  }, [wrapperRef, itemListRef, isWideViewport, setCollapse]);\n\n  useEffect(() => {\n    checkShouldCollapse();\n  }, [children, checkShouldCollapse, isWideViewport]);\n\n  useResizeObserver({ ref: wrapperRef, onResize: checkShouldCollapse });\n\n  return (\n    <div\n      className={cx(\n        styles.Navigation,\n        shouldCollapse && styles['Navigation--collapsed'],\n        className\n      )}\n      data-test-id={testId}\n    >\n      <NavigationContext.Provider\n        value={{\n          shouldCollapse,\n          refs: {\n            wrapperRef,\n            itemListRef,\n          },\n        }}\n      >\n        <NavigationList {...props} />\n      </NavigationContext.Provider>\n    </div>\n  );\n};\n\nexport { Navigation };\nexport type { NavigationProps };\n","import type { NavItemProps } from './NavItem';\nimport type { NavItemWithTooltipProps } from './NavItemWithTooltip';\nimport type { ReactElement } from 'react';\n\ntype NavigationItemProps = NavItemProps &\n  NavItemWithTooltipProps & {\n    tooltip?: boolean | ReactElement;\n  };\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst NavigationItem = (_props: NavigationItemProps) => {\n  return null;\n};\n\nNavigationItem.getCollectionNode = function* (props: NavigationItemProps) {\n  yield {\n    type: 'item',\n    props,\n    'aria-label': props.name,\n    hasChildNodes: false,\n  };\n};\n\nexport { NavigationItem };\nexport type { NavigationItemProps };\n"],"names":["NavBase","kind","className","children","innerRef","ariaLabel","testId","rest","cx","styles","Nav","forwardRef","props","ref","displayName","NavItem","to","name","onClick","status","role","end","other","pathname","useLocation","selected","isActive","undefined","_jsxs","display","alignItems","_jsx","titlecase","defaultContent","_Fragment","NavItemWithTooltip","tooltipContent","tooltipPlacement","tooltipOffset","id","ariaControls","centeredContent","NavigationMenuDropdown","state","useListState","title","collection","map","item","key","NavLink","gap","NavigationList","shouldCollapse","refs","useNavigationContext","wrapperRef","itemListRef","tooltip","Navigation","useRef","setCollapse","useValueEffect","isWideViewport","useMediaQuery","checkShouldCollapse","useCallback","computeShouldCollapse","current","tabs","querySelectorAll","lastTab","length","containerEdge","getBoundingClientRect","right","lastTabEdge","useEffect","onResize","NavigationItem","_props","getCollectionNode","type","hasChildNodes"],"mappings":"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"}