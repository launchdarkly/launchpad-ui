{"version":3,"file":"index.js","sources":["../src/NavigationContext.ts","../src/Nav.tsx","../src/utils.ts","../src/NavItem.tsx","../src/NavItemWithTooltip.tsx","../src/NavigationMenuDropdown.tsx","../src/NavigationList.tsx","../src/Navigation.tsx","../src/NavigationItem.tsx"],"sourcesContent":["import type { RefObject } from 'react';\n\nimport { createContext, useContext } from 'react';\n\ntype NavigationContextModel = {\n  shouldCollapse: boolean;\n  refs: {\n    wrapperRef: RefObject<HTMLDivElement>;\n    itemListRef: RefObject<HTMLDivElement>;\n  };\n};\n\nconst NavigationContext = createContext<NavigationContextModel | undefined>(undefined);\n\nconst useNavigationContext = () => {\n  const context = useContext(NavigationContext);\n\n  if (context === undefined) {\n    throw new Error('useNavigationContext must be used within a NavigationContext provider');\n  }\n\n  return context;\n};\n\nexport { NavigationContext, useNavigationContext };\nexport type { NavigationContextModel };\n","import type { HTMLAttributes, Ref } from 'react';\n\nimport { cx } from 'classix';\nimport { forwardRef } from 'react';\n\nimport styles from './styles/Navigation.module.css';\n\ntype NavBaseProps = HTMLAttributes<HTMLElement> & {\n  kind?: 'primary' | 'secondary';\n  innerRef?: Ref<HTMLDivElement>;\n  'data-test-id'?: string;\n};\n\nconst NavBase = ({\n  kind = 'primary',\n  className,\n  children,\n  innerRef,\n  'aria-label': ariaLabel,\n  'data-test-id': testId = 'nav',\n  ...rest\n}: NavBaseProps) => {\n  return (\n    <nav\n      {...rest}\n      aria-label={ariaLabel ?? `${kind} navigation`}\n      className={cx(styles.Nav, styles[`Nav--${kind}`], className)}\n      data-test-id={testId}\n      ref={innerRef}\n    >\n      {children}\n    </nav>\n  );\n};\n\ntype NavProps = Omit<NavBaseProps, 'innerRef'>;\n\nconst Nav = forwardRef<HTMLDivElement, NavBaseProps>((props, ref) => (\n  <NavBase {...props} innerRef={ref} />\n));\n\nNav.displayName = 'Nav';\n\nexport { Nav };\nexport type { NavProps };\n","import { useEffect, useState } from 'react';\n\nconst titlecase = (str: string) => {\n  return str\n    .toString()\n    .toLowerCase()\n    .replace(/\\b([a-z])/g, (ch) => ch.toUpperCase());\n};\n\nconst useMediaQuery = (query: string) => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n    const handleMediaChange = () => {\n      setMatches(media.matches);\n    };\n    media.addEventListener('change', handleMediaChange);\n    return () => media.addEventListener('change', handleMediaChange);\n  }, [matches, query]);\n\n  return matches;\n};\n\nexport { titlecase, useMediaQuery };\n","import type { ChipProps } from '@launchpad-ui/chip';\nimport type { MouseEvent } from 'react';\n\nimport { Chip } from '@launchpad-ui/chip';\nimport { cx } from 'classix';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nimport styles from './styles/Navigation.module.css';\nimport { titlecase } from './utils';\n\ntype NavItemProps = {\n  to: string | { pathname: string; search: string };\n  name: string;\n  end?: boolean;\n  onClick?(event: MouseEvent): void;\n  activeClassName?: string;\n  status?: ChipProps['kind'];\n  id?: string;\n  role?: string;\n  'data-test-id'?: string;\n};\n\nconst NavItem = ({\n  to,\n  name,\n  onClick,\n  status,\n  role,\n  end,\n  'data-test-id': testId = 'nav-item',\n  ...other\n}: NavItemProps) => {\n  const { pathname } = useLocation();\n  const selected = pathname === to ? 'true' : 'false';\n\n  return (\n    <NavLink\n      {...other}\n      end={end}\n      to={to}\n      className={({ isActive }) => cx(styles.NavItem, isActive && styles['is-active'])}\n      data-text={name}\n      onClick={onClick}\n      role={role}\n      data-nav-target=\"true\" // used by Navigation to check rendered width\n      data-test-id={testId}\n      aria-selected={role === 'tab' ? selected : undefined}\n    >\n      {status ? (\n        <div style={{ display: 'flex', alignItems: 'flex-end' }}>\n          <span className={styles['NavItem-name']}>{name}</span>\n          <Chip className={styles['NavItem-chip']} data-test-id=\"nav-item-chip\" kind={status}>\n            {titlecase(status)}\n          </Chip>\n        </div>\n      ) : (\n        <span className={styles['NavItem-name']}>{name}</span>\n      )}\n    </NavLink>\n  );\n};\n\nexport { NavItem };\nexport type { NavItemProps };\n","import type { Offset, PopoverPlacement } from '@launchpad-ui/popover';\nimport type { MouseEvent } from 'react';\n\nimport { Tooltip } from '@launchpad-ui/tooltip';\n\nimport { NavItem } from './NavItem';\nimport styles from './styles/Navigation.module.css';\n\ntype NavItemWithTooltipProps = {\n  to: string;\n  name: string;\n  end?: boolean;\n  tooltipContent?: string | JSX.Element;\n  tooltipPlacement?: PopoverPlacement;\n  tooltipOffset?: Offset;\n  onClick?(event: MouseEvent): void;\n  id?: string;\n  role?: string;\n  'aria-controls'?: string;\n  'data-test-id'?: string;\n};\n\nconst defaultContent = (\n  <>\n    Upgrade your plan to use this feature.\n    <br />\n    Click to learn more.\n  </>\n);\n\nconst NavItemWithTooltip = ({\n  to,\n  name,\n  tooltipContent = defaultContent,\n  onClick,\n  tooltipPlacement = 'top',\n  tooltipOffset,\n  role,\n  end,\n  id,\n  'aria-controls': ariaControls,\n  'data-test-id': testId = 'nav-item-with-tooltip',\n}: NavItemWithTooltipProps) => {\n  const centeredContent = <div className={styles['NavItem-tooltip']}>{tooltipContent}</div>;\n  return (\n    <Tooltip\n      content={centeredContent}\n      placement={tooltipPlacement}\n      offset={tooltipOffset}\n      allowBoundaryElementOverflow\n      targetClassName={styles['NavPopover-target']}\n      data-test-id={testId}\n    >\n      <NavItem\n        end={end}\n        to={to}\n        name={name}\n        onClick={onClick}\n        role={role}\n        id={id}\n        aria-controls={ariaControls}\n      />\n    </Tooltip>\n  );\n};\n\nexport { NavItemWithTooltip };\nexport type { NavItemWithTooltipProps };\n","import type { CollectionBase } from '@react-types/shared';\n\nimport { Chip } from '@launchpad-ui/chip';\nimport { Dropdown, DropdownButton } from '@launchpad-ui/dropdown';\nimport { Menu, MenuItem } from '@launchpad-ui/menu';\nimport { useListState } from '@react-stately/list';\nimport { NavLink } from 'react-router-dom';\n\nimport { titlecase } from './utils';\n\ntype NavigationMenuDropdownProps<T extends object> = CollectionBase<T> & {\n  title: string;\n};\n\nconst NavigationMenuDropdown = <T extends object>(props: NavigationMenuDropdownProps<T>) => {\n  const state = useListState(props);\n\n  return (\n    <Dropdown>\n      <DropdownButton data-test-id=\"navigation-menu-button\">{props.title}</DropdownButton>\n      <Menu>\n        {[...state.collection].map((item) => (\n          <MenuItem\n            key={item.key}\n            item={item.key}\n            component={NavLink}\n            to={item.props.to}\n            onClick={item.props.onClick}\n          >\n            <div style={{ display: 'flex', gap: 'var(--lp-spacing-300)', alignItems: 'center' }}>\n              <div>{item.props.name}</div>\n              {item.props.status ? (\n                <div>\n                  <Chip kind={item.props.status}>{titlecase(item.props.status)}</Chip>\n                </div>\n              ) : undefined}\n            </div>\n          </MenuItem>\n        ))}\n      </Menu>\n    </Dropdown>\n  );\n};\n\nexport { NavigationMenuDropdown };\nexport type { NavigationMenuDropdownProps };\n","import type { NavProps } from './Nav';\nimport type { CollectionBase } from '@react-types/shared';\n\nimport { useListState } from '@react-stately/list';\n\nimport { Nav } from './Nav';\nimport { NavItem } from './NavItem';\nimport { NavItemWithTooltip } from './NavItemWithTooltip';\nimport { useNavigationContext } from './NavigationContext';\nimport { NavigationMenuDropdown } from './NavigationMenuDropdown';\nimport styles from './styles/Navigation.module.css';\n\ntype NavigationListProps<T extends object> = CollectionBase<T> & {\n  title: string;\n  kind?: NavProps['kind'];\n};\n\nconst NavigationList = <T extends object>({\n  kind = 'primary',\n  title,\n  ...rest\n}: NavigationListProps<T>) => {\n  const state = useListState(rest);\n\n  const { shouldCollapse, refs } = useNavigationContext();\n\n  return (\n    <div className={styles['NavigationList-wrapper']} ref={refs.wrapperRef}>\n      {shouldCollapse ? (\n        <NavigationMenuDropdown title={title} aria-label={title} {...rest} />\n      ) : (\n        <Nav kind={kind} ref={refs.itemListRef}>\n          {[...state.collection].map((item) =>\n            item.props.tooltip ? (\n              <NavItemWithTooltip\n                key={item.key}\n                to={item.props.to}\n                id={item.props.id}\n                name={item.props.name}\n                role={item.props.role}\n                aria-controls={item.props['aria-controls']}\n                tooltipContent={\n                  typeof item.props.tooltip === 'boolean' ? undefined : item.props.tooltip\n                }\n                tooltipOffset={item.props.tooltipOffset}\n                tooltipPlacement={item.props.tooltipPlacement}\n                onClick={item.props.onClick}\n                end={item.props.end}\n              />\n            ) : (\n              <NavItem\n                key={item.key}\n                to={item.props.to}\n                id={item.props.id}\n                name={item.props.name}\n                status={item.props.status}\n                role={item.props.role}\n                aria-controls={item.props['aria-controls']}\n                onClick={item.props.onClick}\n                end={item.props.end}\n              />\n            )\n          )}\n        </Nav>\n      )}\n    </div>\n  );\n};\n\nexport { NavigationList };\nexport type { NavigationListProps };\n","import type { NavProps } from './Nav';\nimport type { CollectionBase } from '@react-types/shared';\n\nimport { useResizeObserver, useValueEffect } from '@react-aria/utils';\nimport { cx } from 'classix';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { NavigationContext } from './NavigationContext';\nimport { NavigationList } from './NavigationList';\nimport styles from './styles/Navigation.module.css';\nimport { useMediaQuery } from './utils';\n\ntype NavigationProps<T extends object> = CollectionBase<T> & {\n  title: string;\n  kind?: NavProps['kind'];\n  role?: string;\n  'data-test-id'?: string;\n  className?: string;\n};\n\nconst Navigation = <T extends object>(props: NavigationProps<T>) => {\n  const { children, className, 'data-test-id': testId = 'navigation' } = props;\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const itemListRef = useRef<HTMLDivElement>(null);\n  const [shouldCollapse, setCollapse] = useValueEffect(false);\n\n  const isWideViewport = useMediaQuery('(min-width: 740px)');\n\n  // From react-spectrum: https://github.com/adobe/react-spectrum/blob/main/packages/%40react-spectrum/tabs/src/Tabs.tsx#L82\n  const checkShouldCollapse = useCallback(() => {\n    function computeShouldCollapse() {\n      if (!wrapperRef.current || !itemListRef.current) {\n        return false;\n      }\n\n      // This is where we're explicitly tied to NavItem\n      const tabs = itemListRef.current.querySelectorAll(\"[data-nav-target='true']\");\n      const lastTab = tabs[tabs.length - 1];\n\n      const containerEdge = wrapperRef.current.getBoundingClientRect().right;\n      const lastTabEdge = lastTab?.getBoundingClientRect().right;\n\n      return containerEdge < lastTabEdge;\n    }\n\n    setCollapse(function* () {\n      if (isWideViewport) {\n        yield false;\n        return;\n      }\n\n      // Make Tabs render in non-collapsed state\n      yield false;\n\n      // Compute if Tabs should collapse and update\n      yield computeShouldCollapse();\n    });\n  }, [wrapperRef, itemListRef, isWideViewport, setCollapse]);\n\n  useEffect(() => {\n    checkShouldCollapse();\n  }, [children, checkShouldCollapse, isWideViewport]);\n\n  useResizeObserver({ ref: wrapperRef, onResize: checkShouldCollapse });\n\n  return (\n    <div\n      className={cx(\n        styles.Navigation,\n        shouldCollapse && styles['Navigation--collapsed'],\n        className\n      )}\n      data-test-id={testId}\n    >\n      <NavigationContext.Provider\n        value={{\n          shouldCollapse,\n          refs: {\n            wrapperRef,\n            itemListRef,\n          },\n        }}\n      >\n        <NavigationList {...props} />\n      </NavigationContext.Provider>\n    </div>\n  );\n};\n\nexport { Navigation };\nexport type { NavigationProps };\n","import type { NavItemProps } from './NavItem';\nimport type { NavItemWithTooltipProps } from './NavItemWithTooltip';\nimport type { ReactElement } from 'react';\n\ntype NavigationItemProps = NavItemProps &\n  NavItemWithTooltipProps & {\n    tooltip?: boolean | ReactElement;\n  };\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst NavigationItem = (_props: NavigationItemProps) => {\n  return null;\n};\n\nNavigationItem.getCollectionNode = function* (props: NavigationItemProps) {\n  yield {\n    type: 'item',\n    props,\n    'aria-label': props.name,\n    hasChildNodes: false,\n  };\n};\n\nexport { NavigationItem };\nexport type { NavigationItemProps };\n"],"names":["createContext","useContext","jsx","cx","forwardRef","useState","useEffect","useLocation","NavLink","Chip","jsxs","Fragment","Tooltip","useListState","Dropdown","DropdownButton","Menu","MenuItem","useRef","useValueEffect","useCallback","useResizeObserver"],"mappings":"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"}