{"version":3,"file":"index.js","sources":["../src/Snackbar.tsx","../src/SnackbarCenter.tsx"],"sourcesContent":["import type { AnchorHTMLAttributes, HTMLAttributes, ReactElement, ReactNode } from 'react';\n\nimport { IconButton } from '@launchpad-ui/button';\nimport { Close, StatusIcon } from '@launchpad-ui/icons';\nimport { cx } from 'classix';\nimport { cloneElement } from 'react';\n\nimport styles from './styles/Snackbar.module.css';\n\ntype SnackbarBaseProps = {\n  kind: 'info' | 'error' | 'warning' | 'success';\n  header?: ReactNode;\n  description: ReactNode;\n  cta?: ReactElement<AnchorHTMLAttributes<HTMLAnchorElement>>;\n  onDismiss?: () => void;\n  'data-test-id'?: string;\n};\n\ntype SnackbarProps = Omit<HTMLAttributes<HTMLDivElement>, 'children'> & SnackbarBaseProps;\n\nconst Snackbar = ({\n  className,\n  kind,\n  header,\n  description,\n  cta,\n  onDismiss,\n  'data-test-id': testId = 'snackbar',\n  ...rest\n}: SnackbarProps) => {\n  const CTA =\n    cta &&\n    cloneElement(cta, {\n      onClick: onDismiss,\n    });\n\n  return (\n    <div\n      {...rest}\n      className={cx(styles.Snackbar, styles[`Snackbar--${kind}`], className)}\n      data-test-id={testId}\n      role=\"status\"\n    >\n      <StatusIcon kind={kind} className={styles['Snackbar-icon']} />\n      <div className={styles['Snackbar-content']}>\n        {header && <h4 className={styles['Snackbar-heading']}>{header}</h4>}\n        <span className={styles['Snackbar-description']}>{description}</span> {CTA}\n      </div>\n      <IconButton\n        icon={<Close size=\"small\" />}\n        size=\"small\"\n        aria-label=\"Dismiss\"\n        kind=\"close\"\n        className={styles['Snackbar-close']}\n        data-test-id=\"snackbar-dismiss\"\n        onClick={onDismiss}\n      />\n    </div>\n  );\n};\n\nexport { Snackbar };\nexport type { SnackbarBaseProps, SnackbarProps };\n","import type { SnackbarBaseProps } from './Snackbar';\n\nimport { cx } from 'classix';\nimport { AnimatePresence, LazyMotion, m } from 'framer-motion';\n\nimport { Snackbar } from './Snackbar';\nimport styles from './styles/SnackbarCenter.module.css';\n\nconst loadFeatures = () =>\n  import(\n    /* webpackChunkName: \"lp-snackbar-framer-features\" */\n    /* webpackExports: \"domAnimation\" */\n    'framer-motion'\n  ).then((res) => res.domAnimation);\n\ntype SnackbarRecord = SnackbarBaseProps & {\n  _id: string;\n};\n\ntype SnackbarCenterProps = {\n  className?: string;\n  snackbars: SnackbarRecord[];\n  dismissSnackbar(snackbarId: string): void;\n};\n\nconst SnackbarCenter = ({ snackbars, dismissSnackbar, className }: SnackbarCenterProps) => {\n  const classes = cx(styles.SnackbarCenter, className);\n\n  const handleDismiss = (item: SnackbarRecord) => {\n    item.onDismiss?.();\n    dismissSnackbar(item._id);\n  };\n\n  return (\n    <LazyMotion strict features={loadFeatures}>\n      <div className={classes}>\n        <AnimatePresence initial={false}>\n          {snackbars.map((item) => (\n            <m.div\n              className={styles['SnackbarCenter-item']}\n              key={item._id}\n              transition={{ ease: 'easeInOut' }}\n              initial={{ x: '100%' }}\n              animate={{ x: '0%' }}\n              exit={{ x: '100%' }}\n            >\n              <Snackbar\n                kind={item.kind}\n                description={item.description}\n                header={item.header}\n                cta={item.cta}\n                onDismiss={() => handleDismiss(item)}\n              />\n            </m.div>\n          ))}\n        </AnimatePresence>\n      </div>\n    </LazyMotion>\n  );\n};\n\nexport { SnackbarCenter };\nexport type { SnackbarCenterProps, SnackbarRecord };\n"],"names":["Snackbar","className","kind","header","description","cta","onDismiss","testId","rest","CTA","cloneElement","onClick","cx","styles","_jsx","StatusIcon","_jsxs","IconButton","Close","loadFeatures","then","res","domAnimation","SnackbarCenter","snackbars","dismissSnackbar","classes","handleDismiss","item","_id","LazyMotion","AnimatePresence","map","m","ease","x"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,MAAMA,WAAW,CAAC;AAAA,EAChBC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACA,gBAAgBC,SAAS;AAAA,KACtBC;AACU,MAAM;AACbC,QAAAA,MACJJ,OACAK,MAAAA,aAAaL,KAAK;AAAA,IAChBM,SAASL;AAAAA,EAAAA,CACV;AAEH,yCACE,OAAA;AAAA,IAAA,GACME;AAAAA,IACJ,WAAWI,QAAAA,GAAGC,SAAOb,UAAUa,SAAQ,aAAYX,SAASD,SAAS;AAAA,IACrE,gBAAcM;AAAAA,IACd,MAAK;AAAA,IAAQ,UAAA,CAEbO,2BAAA,IAACC,kBAAU;AAAA,MAAC;AAAA,MAAY,WAAWF,SAAO;AAAA,IAAA,CAAiB,GAC3DG,2BAAA,KAAA,OAAA;AAAA,MAAK,WAAWH,SAAO;AAAA,MAAoB,UAAA,CACxCV,UAAUW,2BAAA,IAAA,MAAA;AAAA,QAAI,WAAWD,SAAO;AAAA,QAAoB,UAAEV;AAAAA,MAAAA,CAAM,GAC7DW,2BAAA,IAAA,QAAA;AAAA,QAAM,WAAWD,SAAO;AAAA,QAAwB,UAAET;AAAAA,MAAAA,CAAW,QAAUK,GAAG;AAAA,IAAA,CACtE,GACNK,2BAAA,IAACG,mBAAU;AAAA,MACT,qCAAOC,aAAK;AAAA,QAAC,MAAK;AAAA,MAAA,CAAW;AAAA,MAC7B,MAAK;AAAA,MACL,cAAW;AAAA,MACX,MAAK;AAAA,MACL,WAAWL,SAAO;AAAA,MAClB,gBAAa;AAAA,MACb,SAASP;AAAAA,IAAAA,CACT,CAAA;AAAA,EAAA,CACE;AAEV;;;;;;ACnDA,MAAMa,eAAe,MACnB,QAAA,QAAA,EAAA,KAAA,MAAA,kCAAA;AAAA,EAGE;AAAA,CACAC,CAAAA,EAAAA,KAAMC,CAAQA,QAAAA,IAAIC,YAAY;AAYlC,MAAMC,iBAAiB,CAAC;AAAA,EAAEC;AAAAA,EAAWC;AAAAA,EAAiBxB;AAA+B,MAAM;AACzF,QAAMyB,UAAUd,QAAAA,GAAGC,OAAOU,gBAAgBtB,SAAS;AAE7C0B,QAAAA,gBAAgB,CAACC,SAAyB;;AAC9CA,eAAKtB,cAALsB;AACAH,oBAAgBG,KAAKC,GAAG;AAAA,EAAA;AAG1B,wCACGC,aAAAA,YAAU;AAAA,IAAC,QAAM;AAAA,IAAC,UAAUX;AAAAA,IAAa,yCACxC,OAAA;AAAA,MAAK,WAAWO;AAAAA,MAAQ,yCACrBK,8BAAe;AAAA,QAAC,SAAS;AAAA,QAAM,UAC7BP,UAAUQ,IAAKJ,CACd,SAAAd,2BAAA,IAACmB,eAAE,KAAG;AAAA,UACJ,WAAWpB,OAAO;AAAA,UAElB,YAAY;AAAA,YAAEqB,MAAM;AAAA,UAAY;AAAA,UAChC,SAAS;AAAA,YAAEC,GAAG;AAAA,UAAO;AAAA,UACrB,SAAS;AAAA,YAAEA,GAAG;AAAA,UAAK;AAAA,UACnB,MAAM;AAAA,YAAEA,GAAG;AAAA,UAAO;AAAA,UAAE,yCAEnB,UAAQ;AAAA,YACP,MAAMP,KAAK1B;AAAAA,YACX,aAAa0B,KAAKxB;AAAAA,YAClB,QAAQwB,KAAKzB;AAAAA,YACb,KAAKyB,KAAKvB;AAAAA,YACV,WAAW,MAAMsB,cAAcC,IAAI;AAAA,UAAA,CAAE;AAAA,QAAA,GAXlCA,KAAKC,GAAG,CAchB;AAAA,MAAA,CAAC;AAAA,IAAA,CACc;AAAA,EAAA,CAET;AAEjB;;;"}