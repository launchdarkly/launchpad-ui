import figma from '@figma/code-connect';

import { Input } from '../src/Input';
import { Label } from '../src/Label';
import { TextField } from '../src/TextField';

/**
 * -- This file was auto-generated by Code Connect --
 * `props` includes a mapping from your code props to Figma properties.
 * You should check this is correct, and update the `example` function
 * to return the code example you'd like to see in Figma
 */

figma.connect(
	TextField,
	'https://www.figma.com/design/98HKKXL2dTle29ikJ3tzk7/%F0%9F%9A%80-LaunchPad?node-id=1-34232',
	{
		props: {
			// These props were automatically mapped based on your linked code:
			value: figma.string('Value'),
			id: figma.string('Validation message'),
			name: figma.string('Validation message'),
			multiline: figma.boolean('Multi Line'),
			placeholder: figma.string('Placeholder'),
			helpText: figma.string('Help text'),
			validationMessage: figma.boolean('Validation message'),
			state: figma.enum('State', {
				Disabled: 'disabled',
				Resting: 'resting',
				Invalid: 'invalid',
			}),
			minimal: figma.boolean('Minimal'),
			//description: figma.string('Description'),
			// No matching props could be found for these Figma properties:
			// "value": figma.string('Value'),
			// "validationMessage": figma.string('Validation message'),
			// "placeholder": figma.string('Placeholder'),
			// "placeholder": figma.boolean('Placeholder?'),
			// "value": figma.boolean('Value?'),
			// "helpText": figma.string('Help text'),
			// "helpText": figma.boolean('Help text?'),
			// "label": figma.boolean('Label?'),
			// "state": figma.enum('State', {
			//   "Resting": "resting",
			//   ":hover": "-hover",
			//   ":focus-visible": "-focus-visible",
			//   ":active": "-active",
			//   "Invalid": "invalid",
			//   "Disabled": "disabled"
			// }),
			// "multiLine": figma.boolean('Multi Line'),
			// "minimal": figma.boolean('Minimal')
		},
		example: (props) => (
			<TextField
				value={props.value}
				isDisabled={props.state === 'disabled'}
				isInvalid={props.state === 'invalid'}
				id={props.id}
				name={props.name}
			>
				<Label>Label text</Label>
				<Input placeholder={props.placeholder} value={props.value} />
			</TextField>
		),
	},
);
