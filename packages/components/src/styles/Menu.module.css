.menu {
	max-height: inherit;
	overflow: auto;
	outline: none;
	min-width: var(--lp-size-144);

	&:where([role='menu']) {
		max-width: var(--lp-size-400);
	}

	&:not(:has([role='group'])) {
		padding: var(--lp-spacing-200);
	}
}

.item {
	composes: interactive from './base.module.css';
	padding-block: var(--lp-spacing-200);
	padding-inline: var(--lp-spacing-300);
	border-radius: var(--lp-border-radius-regular);
	outline: none;
	color: var(--lp-color-text-ui-primary-base);
	font: var(--lp-text-label-1-medium);
	position: relative;
	display: flex;
	column-gap: var(--lp-spacing-300);
	align-items: center;
	forced-color-adjust: none;
	text-decoration: none;

	&[data-hovered] {
		background-color: var(--lp-color-bg-interactive-secondary-hover);
	}

	&[data-pressed] {
		background-color: var(--lp-color-bg-interactive-secondary-active);
	}

	&[data-focus-visible],
	&[data-focused] {
		background-color: var(--lp-color-bg-interactive-secondary-hover);
	}

	&[data-disabled] {
		color: var(--lp-color-text-interactive-disabled);
	}

	& .content {
		display: flex;
		align-items: center;
		column-gap: var(--lp-spacing-300);
		flex: 1;
		min-width: 0;
	}

	&:has([slot='label']) {
		& .content {
			display: grid;
			grid-template-areas:
				'label'
				'desc';
		}

		&:has(kbd) {
			/* biome-ignore lint/style/noDescendingSpecificity: ignore */
			& .content {
				grid-template-areas:
					'label kbd'
					'desc -';
				grid-template-columns: 1fr min-content;
			}
		}
	}

	& [slot='label'] {
		grid-area: label;
		display: flex;
		align-items: center;
		gap: var(--lp-spacing-300);
	}

	& [slot='description'] {
		grid-area: desc;
		word-break: break-all;
	}

	&:has([slot='label']:has([data-icon])) ~ [slot='description'] {
		padding-inline-start: calc(var(--lp-size-16) + var(--lp-spacing-300));
	}

	& kbd {
		grid-area: kbd;
		font: var(--lp-text-code-1-regular);
	}
}

.default {
}

.destructive {
	color: var(--lp-color-text-interactive-destructive);

	&[data-hovered] {
		background-color: var(--lp-color-bg-interactive-destructive-hover);
		color: var(--lp-color-text-interactive-primary-base);
	}

	&[data-pressed] {
		background-color: var(--lp-color-bg-interactive-destructive-active);
		color: var(--lp-color-text-interactive-primary-base);
	}

	&[data-focus-visible] {
		background-color: var(--lp-color-bg-interactive-destructive-hover);
		color: var(--lp-color-text-interactive-primary-base);
	}

	& [data-icon] {
		fill: currentColor;
	}
}
