{"version":3,"file":"index.js","sources":["../src/Table.tsx","../src/TableBody.tsx","../src/TableCell.tsx","../src/TableHead.tsx","../src/TableHeadCell.tsx","../src/TableRow.tsx"],"sourcesContent":["import type { TableHTMLAttributes } from 'react';\n\nimport { cx } from 'classix';\n\nimport styles from './styles/Table.module.css';\n\ntype TableProps = TableHTMLAttributes<HTMLTableElement> & {\n  auto?: boolean;\n  compact?: boolean;\n  isResourceTable?: boolean;\n  summary?: string;\n  'data-test-id'?: string;\n};\n\nconst Table = ({\n  auto,\n  compact,\n  className,\n  children,\n  isResourceTable,\n  'data-test-id': testId = 'table',\n  ...rest\n}: TableProps) => {\n  const classes = cx(\n    styles.Table,\n    auto && styles['Table--auto'],\n    compact && styles['Table--compact'],\n    isResourceTable && styles['Table--resourceTable'],\n    className\n  );\n\n  return (\n    <table {...rest} data-test-id={testId} className={classes}>\n      {children}\n    </table>\n  );\n};\n\nexport { Table };\nexport type { TableProps };\n","import type { HTMLAttributes } from 'react';\n\nimport { cx } from 'classix';\n\nimport styles from './styles/Table.module.css';\n\ntype TableBodyProps = HTMLAttributes<HTMLTableSectionElement> & {\n  'data-test-id'?: string;\n};\n\nconst TableBody = ({\n  className,\n  children,\n  'data-test-id': testId = 'table-body',\n  ...rest\n}: TableBodyProps) => {\n  const classes = cx(styles['Table-body'], className);\n\n  return (\n    <tbody {...rest} data-test-id={testId} className={classes}>\n      {children}\n    </tbody>\n  );\n};\n\nexport { TableBody };\nexport type { TableBodyProps };\n","import type { TdHTMLAttributes } from 'react';\n\nimport { cx } from 'classix';\n\nimport styles from './styles/Table.module.css';\n\n// Ensure that the headers are properly associated with table content.\ntype TableCellWithHeadersProps = {\n  headers: string;\n} & TdHTMLAttributes<HTMLTableCellElement>;\n\n// When a cell acts as a header for all cells below it -- a scope of col needs to be used unless a colgroup is present.\ntype TableCellWithDirectScopeProps = {\n  scope: 'row' | 'col';\n} & TdHTMLAttributes<HTMLTableCellElement>;\n\n// hasScope indicates that no identifying header info will be added to the dom element.\n// instead, it is assumed that the head element in the table has its scope property defined\ntype TableCellWithScopedProps = {\n  hasScope: boolean;\n} & TdHTMLAttributes<HTMLTableCellElement>;\n\ntype TableCellWithScopeProps = TableCellWithDirectScopeProps | TableCellWithScopedProps;\n\n// Enforce one or the other - headers or scope - or both.\ntype TableCellProps =\n  | TableCellWithHeadersProps\n  | TableCellWithScopeProps\n  | (TableCellWithHeadersProps & TableCellWithScopeProps);\n\nconst TableCell = ({ align = 'left', className, children, ...rest }: TableCellProps) => {\n  const classes = cx(styles['Table-cell'], styles[`Table-cell--${align}`], className);\n\n  // remove hasScope from rest props so we don't pollute the dom element\n  const restProps: Partial<TableCellProps> = rest;\n  if ('hasScope' in restProps) {\n    delete restProps.hasScope;\n  }\n\n  return (\n    <td {...restProps} className={classes}>\n      {children}\n    </td>\n  );\n};\n\nexport { TableCell };\nexport type { TableCellProps };\n","import type { HTMLAttributes } from 'react';\n\nimport { cx } from 'classix';\n\nimport styles from './styles/Table.module.css';\n\ntype TableHeadProps = HTMLAttributes<HTMLTableSectionElement> & {\n  'data-test-id'?: string;\n};\n\nconst TableHead = ({\n  className,\n  children,\n  'data-test-id': testId = 'table-head',\n  ...rest\n}: TableHeadProps) => {\n  const classes = cx(styles['Table-header'], className);\n\n  return (\n    <thead {...rest} data-test-id={testId} className={classes}>\n      {children}\n    </thead>\n  );\n};\n\nexport { TableHead };\nexport type { TableHeadProps };\n","import type { ThHTMLAttributes } from 'react';\n\nimport { cx } from 'classix';\n\nimport styles from './styles/Table.module.css';\n\ntype TableHeadCellProps = ThHTMLAttributes<HTMLTableCellElement> & {\n  defaultColWidth?:\n    | 'zero'\n    | 'one-of-twelve'\n    | 'two-of-twelve'\n    | 'three-of-twelve'\n    | 'four-of-twelve'\n    | 'five-of-twelve'\n    | 'six-of-twelve';\n};\n\nconst TableHeadCell = ({\n  align = 'left',\n  className,\n  children,\n  defaultColWidth,\n  scope = 'col',\n  ...rest\n}: TableHeadCellProps) => {\n  const widthClass = defaultColWidth ? styles[`Table-cell--width-${defaultColWidth}`] : '';\n  const classes = cx(\n    styles['Table-cell'],\n    styles['Table-cell--head'],\n    styles[`Table-cell--${align}`],\n    widthClass,\n    className\n  );\n\n  return (\n    <th {...rest} className={classes} scope={scope}>\n      {children}\n    </th>\n  );\n};\n\nexport { TableHeadCell };\nexport type { TableHeadCellProps };\n","import type { HTMLProps } from 'react';\n\nimport { cx } from 'classix';\n\nimport styles from './styles/Table.module.css';\n\ntype TableRowProps = HTMLProps<HTMLTableRowElement> & {\n  verticalAlign?: 'top' | 'middle' | 'bottom';\n  'data-test-id'?: string;\n};\n\nconst TableRow = ({\n  className,\n  children,\n  verticalAlign,\n  'data-test-id': testId = 'table-row',\n  ...rest\n}: TableRowProps) => {\n  const verticalAlignClass = verticalAlign ? styles[`Table-row--${verticalAlign}`] : '';\n  const classes = cx(styles['Table-row'], verticalAlignClass, className);\n\n  return (\n    <tr {...rest} className={classes} data-test-id={testId}>\n      {children}\n    </tr>\n  );\n};\n\nexport { TableRow };\nexport type { TableRowProps };\n"],"names":["cx","jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,MAAM,QAAQ,CAAC;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAgB,SAAS;AAAA,KACtB;AACL,MAAkB;AAChB,QAAM,UAAUA,QAAA;AAAA,IACd,OAAO;AAAA,IACP,QAAQ,OAAO;AAAA,IACf,WAAW,OAAO;AAAA,IAClB,mBAAmB,OAAO;AAAA,IAC1B;AAAA,EAAA;AAIA,SAAAC,+BAAC,WAAO,GAAG,MAAM,gBAAc,QAAQ,WAAW,SAC/C,SACH,CAAA;AAEJ;AC1BA,MAAM,YAAY,CAAC;AAAA,EACjB;AAAA,EACA;AAAA,EACA,gBAAgB,SAAS;AAAA,KACtB;AACL,MAAsB;AACpB,QAAM,UAAUD,QAAAA,GAAG,OAAO,eAAe,SAAS;AAGhD,SAAAC,+BAAC,WAAO,GAAG,MAAM,gBAAc,QAAQ,WAAW,SAC/C,SACH,CAAA;AAEJ;ACOM,MAAA,YAAY,CAAC,EAAE,QAAQ,QAAQ,WAAW,aAAa,WAA2B;AACtF,QAAM,UAAUD,QAAAA,GAAG,OAAO,eAAe,OAAO,eAAe,UAAU,SAAS;AAGlF,QAAM,YAAqC;AAC3C,MAAI,cAAc,WAAW;AAC3B,WAAO,UAAU;AAAA,EACnB;AAEA,wCACG,MAAI,EAAA,GAAG,WAAW,WAAW,SAC3B,SACH,CAAA;AAEJ;AClCA,MAAM,YAAY,CAAC;AAAA,EACjB;AAAA,EACA;AAAA,EACA,gBAAgB,SAAS;AAAA,KACtB;AACL,MAAsB;AACpB,QAAM,UAAUA,QAAAA,GAAG,OAAO,iBAAiB,SAAS;AAGlD,SAAAC,+BAAC,WAAO,GAAG,MAAM,gBAAc,QAAQ,WAAW,SAC/C,SACH,CAAA;AAEJ;ACNA,MAAM,gBAAgB,CAAC;AAAA,EACrB,QAAQ;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,KACL;AACL,MAA0B;AACxB,QAAM,aAAa,kBAAkB,OAAO,qBAAqB,qBAAqB;AACtF,QAAM,UAAUD,QAAA;AAAA,IACd,OAAO;AAAA,IACP,OAAO;AAAA,IACP,OAAO,eAAe;AAAA,IACtB;AAAA,IACA;AAAA,EAAA;AAGF,wCACG,MAAI,EAAA,GAAG,MAAM,WAAW,SAAS,OAC/B,SACH,CAAA;AAEJ;AC5BA,MAAM,WAAW,CAAC;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAgB,SAAS;AAAA,KACtB;AACL,MAAqB;AACnB,QAAM,qBAAqB,gBAAgB,OAAO,cAAc,mBAAmB;AACnF,QAAM,UAAUA,QAAAA,GAAG,OAAO,cAAc,oBAAoB,SAAS;AAGnE,SAAAC,+BAAC,QAAI,GAAG,MAAM,WAAW,SAAS,gBAAc,QAC7C,SACH,CAAA;AAEJ;;;;;;;"}