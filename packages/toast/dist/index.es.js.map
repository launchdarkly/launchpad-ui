{"version":3,"file":"index.es.js","sources":["../src/Toast.tsx","../src/ToastCenter.tsx"],"sourcesContent":["import type { HTMLAttributes, ReactNode } from 'react';\n\nimport { StatusIcon } from '@launchpad-ui/icons';\nimport { cx } from 'classix';\nimport { useEffect } from 'react';\n\nimport styles from './styles/Toast.module.css';\n\ntype ToastBaseProps = {\n  kind: 'info' | 'success' | 'warning';\n  onDismiss: () => void;\n  content: ReactNode;\n  'data-test-id'?: string;\n};\n\ntype ToastProps = Omit<HTMLAttributes<HTMLDivElement>, 'children'> & ToastBaseProps;\n\nconst Toast = ({\n  className,\n  kind,\n  onDismiss,\n  content,\n  'data-test-id': testId = 'toast',\n  ...rest\n}: ToastProps) => {\n  useEffect(() => {\n    setTimeout(() => {\n      onDismiss();\n    }, 6000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div\n      {...rest}\n      className={cx(styles.Toast, styles[`Toast--${kind}`], className)}\n      data-test-id={testId}\n      role=\"status\"\n    >\n      {kind !== 'info' && <StatusIcon kind={kind} className={styles['Toast-icon']} />}\n      <p className={styles['Toast-content']}>{content}</p>\n    </div>\n  );\n};\n\nexport { Toast };\nexport type { ToastBaseProps, ToastProps };\n","import type { ToastBaseProps } from './Toast';\n\nimport { cx } from 'classix';\nimport { AnimatePresence, LazyMotion, m } from 'framer-motion';\n\nimport { Toast } from './Toast';\nimport styles from './styles/ToastCenter.module.css';\n\nconst loadFeatures = () =>\n  import(\n    /* webpackChunkName: \"lp-toast-framer-features\" */\n    /* webpackExports: \"domAnimation\" */\n    'framer-motion'\n  ).then((res) => res.domAnimation);\n\ntype ToastRecord = Omit<ToastBaseProps, 'onDismiss'> & {\n  _id: string;\n};\n\ntype ToastCenterProps = {\n  className?: string;\n  toasts: ToastRecord[];\n  onDismiss(toastId: string): void;\n};\n\nconst ToastCenter = ({ toasts, onDismiss, className }: ToastCenterProps) => {\n  const classes = cx(styles.ToastCenter, className);\n\n  return (\n    <LazyMotion strict features={loadFeatures}>\n      <div className={classes}>\n        <AnimatePresence initial={false}>\n          {toasts.map((item) => (\n            <m.div\n              className={styles['ToastCenter-item']}\n              key={item._id}\n              transition={{ ease: 'easeInOut' }}\n              initial={{ y: '100%' }}\n              animate={{ y: '0%' }}\n              exit={{ y: '0%' }}\n            >\n              <Toast\n                kind={item.kind}\n                content={item.content}\n                onDismiss={() => onDismiss(item._id)}\n              />\n            </m.div>\n          ))}\n        </AnimatePresence>\n      </div>\n    </LazyMotion>\n  );\n};\n\nexport { ToastCenter };\nexport type { ToastCenterProps, ToastRecord };\n"],"names":["styles"],"mappings":";;;;;;;;;;;;;;;AAiBA,MAAM,QAAQ,CAAC;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAgB,SAAS;AAAA,KACtB;AACL,MAAkB;AAChB,YAAU,MAAM;AACd,eAAW,MAAM;AACL;OACT,GAAI;AAAA,EAET,GAAG,CAAE,CAAA;AAGH,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACE,GAAG;AAAA,MACJ,WAAW,GAAGA,SAAO,OAAOA,SAAO,UAAU,SAAS,SAAS;AAAA,MAC/D,gBAAc;AAAA,MACd,MAAK;AAAA,MAEJ,UAAA;AAAA,QAAA,SAAS,UAAW,oBAAA,YAAA,EAAW,MAAY,WAAWA,SAAO,eAAe;AAAA,QAC5E,oBAAA,KAAA,EAAE,WAAWA,SAAO,kBAAmB,UAAQ,SAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAAA;AAGtD;;;;;;ACnCA,MAAM,eAAe,MACnB;AAAA;AAAA;AAAA,EAGE;AAAA,EACA,KAAK,CAAC,QAAQ,IAAI,YAAY;AAYlC,MAAM,cAAc,CAAC,EAAE,QAAQ,WAAW,gBAAkC;AAC1E,QAAM,UAAU,GAAG,OAAO,aAAa,SAAS;AAEhD,6BACG,YAAW,EAAA,QAAM,MAAC,UAAU,cAC3B,UAAC,oBAAA,OAAA,EAAI,WAAW,SACd,8BAAC,iBAAgB,EAAA,SAAS,OACvB,UAAO,OAAA,IAAI,CAAC,SACX;AAAA,IAAC,EAAE;AAAA,IAAF;AAAA,MACC,WAAW,OAAO;AAAA,MAElB,YAAY,EAAE,MAAM,YAAY;AAAA,MAChC,SAAS,EAAE,GAAG,OAAO;AAAA,MACrB,SAAS,EAAE,GAAG,KAAK;AAAA,MACnB,MAAM,EAAE,GAAG,KAAK;AAAA,MAEhB,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,MAAM,KAAK;AAAA,UACX,SAAS,KAAK;AAAA,UACd,WAAW,MAAM,UAAU,KAAK,GAAG;AAAA,QAAA;AAAA,MACrC;AAAA,IAAA;AAAA,IAVK,KAAK;AAAA,EAAA,CAYb,EACH,CAAA,GACF,EACF,CAAA;AAEJ;"}