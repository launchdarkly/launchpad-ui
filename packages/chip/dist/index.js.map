{"version":3,"file":"index.js","sources":["../src/Chip.tsx"],"sourcesContent":["import type { HTMLAttributes } from 'react';\n\nimport { cx } from 'classix';\n\nimport styles from './styles/Chip.module.css';\n\ntype ChipProps = HTMLAttributes<HTMLSpanElement> & {\n  kind?:\n    | 'default'\n    | 'success'\n    | 'warning'\n    | 'inactive'\n    | 'info'\n    | 'label'\n    | 'new'\n    | 'beta'\n    | 'federal';\n  size?: 'normal' | 'large';\n  subtle?: boolean;\n  'data-test-id'?: string;\n};\n\nconst Chip = ({\n  kind = 'default',\n  size = 'normal',\n  subtle = false,\n  onClick,\n  onKeyDown,\n  className,\n  children,\n  'data-test-id': testId = 'chip',\n  ...rest\n}: ChipProps) => {\n  const isInteractive = !!(onClick || onKeyDown);\n\n  const classes = cx(\n    styles.Chip,\n    styles[`Chip--${kind}`],\n    styles[`Chip--${size}`],\n    className,\n    subtle && styles['Chip--subtle'],\n    isInteractive && styles['Chip--clickable']\n  );\n\n  return (\n    <span\n      className={classes}\n      data-test-id={testId}\n      {...(isInteractive\n        ? {\n            onClick,\n            onKeyDown,\n            tabIndex: 0,\n            role: 'button',\n          }\n        : {})}\n      {...rest}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport { Chip };\nexport type { ChipProps };\n"],"names":["Chip","kind","size","subtle","onClick","onKeyDown","className","children","testId","rest","isInteractive","classes","cx","styles","tabIndex","role"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMA,OAAO,CAAC;AAAA,EACZC,OAAO;AAAA,EACPC,OAAO;AAAA,EACPC,SAAS;AAAA,EACTC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACA,gBAAgBC,SAAS;AAAA,KACtBC;AACM,MAAM;AACTC,QAAAA,gBAAgB,CAAC,EAAEN,WAAWC;AAEpC,QAAMM,UAAUC,QAAAA,GACdC,OAAOb,MACPa,OAAQ,SAAQZ,SAChBY,OAAQ,SAAQX,SAChBI,WACAH,UAAUU,OAAO,iBACjBH,iBAAiBG,OAAO,kBAAkB;AAG5C,wCACE,QAAA;AAAA,IACE,WAAWF;AAAAA,IACX,gBAAcH;AAAAA,IAAO,GAChBE,gBACD;AAAA,MACEN;AAAAA,MACAC;AAAAA,MACAS,UAAU;AAAA,MACVC,MAAM;AAAA,IAAA,IAER,CAAC;AAAA,IAAC,GACFN;AAAAA,IAAI;AAAA,EAAA,CAGH;AAEX;;"}