{"version":3,"file":"index.es.js","sources":["../src/Toggle.tsx"],"sourcesContent":["import type { ReactNode } from 'react';\n\nimport { useSwitch } from '@react-aria/switch';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useToggleState } from '@react-stately/toggle';\nimport { cx } from 'classix';\nimport { useRef } from 'react';\n\nimport styles from './styles/Toggle.module.css';\n\ntype ToggleProps = {\n  /**\n   * Use an aria-label if you don't pass in children and don't have a visible label to associate with the input element.\n   */\n  'aria-label'?: string;\n  /**\n   * id attribute of the label text elsewhere in the app, used for screen reader support. Use this for cases where you have a visible label on the page that **is not close to** to the input. https://tink.uk/the-difference-between-aria-label-and-aria-labelledby/\n   */\n  'aria-labelledby'?: string;\n  /**\n   * Is the Toggle checked?\n   */\n  checked?: boolean;\n  /**\n   * The text to pass into the Toggle label.\n   */\n  children?: ReactNode;\n  /**\n   * Custom classname(s) to add to the Toggle.\n   */\n  className?: string;\n  /**\n   * Is the Toggle disabled?\n   */\n  disabled?: boolean;\n  /**\n   * The id to pair the Toggle input with the label for screen reader support.\n   */\n  id?: string;\n  /**\n   * The function to pass into the Toggle onChange synthetic event handler\n   */\n  onChange?(): void;\n  /**\n   * Text to display when Toggle is offdefault text is 'Off'.\n   */\n  toggleOffText?: string;\n  /**\n   * Text to display when Toggle is on, default text is 'On'.\n   */\n  toggleOnText?: string;\n  'data-test-id'?: string;\n};\n\n/**\n * The react-aria library requires us to leverage useToggleState and useRef\n * to pass into the useSwitch hook. The props are deconstructed in the body of the\n * function rather than in the parameters.\n * The VisuallyHidden component from the react-aria library adds some extra\n * goodness (the useFocus hook is leveraged).\n */\n\nconst Toggle = (props: ToggleProps) => {\n  const {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    checked,\n    children,\n    className,\n    disabled,\n    id = 'id',\n    onChange,\n    toggleOffText = 'Off',\n    toggleOnText = 'On',\n    'data-test-id': testId = 'toggle',\n  } = props;\n  const state = useToggleState(props);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { inputProps } = useSwitch(props, state, inputRef);\n  const classes = cx(\n    styles.Toggle,\n    className,\n    checked && styles['Toggle--on'],\n    disabled && styles['Toggle--disabled']\n  );\n\n  const handleChange = () => {\n    if (disabled || !onChange) {\n      return;\n    }\n\n    onChange();\n  };\n\n  return (\n    <div className={classes}>\n      <input\n        {...inputProps}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledby}\n        checked={checked}\n        className={styles['Toggle-input']}\n        disabled={disabled}\n        id={id}\n        data-test-id={testId}\n        type=\"checkbox\"\n        onChange={handleChange}\n        ref={inputRef}\n      />\n      <label className={styles['Toggle-wrapper']} htmlFor={id}>\n        <VisuallyHidden>\n          <div>{children}</div>\n        </VisuallyHidden>\n        <div className={styles['Toggle-labels']} aria-hidden>\n          <div className={cx(styles['Toggle-label'], styles['Toggle-on'])}>{toggleOnText}</div>\n          <div className={cx(styles['Toggle-label'], styles['Toggle-off'])}>{toggleOffText}</div>\n        </div>\n        <div className={styles['Toggle-pin']} />\n      </label>\n    </div>\n  );\n};\n\nexport { Toggle };\nexport type { ToggleProps };\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AA8DM,MAAA,SAAS,CAAC,UAAuB;AAC/B,QAAA;AAAA,IACJ,cAAc;AAAA,IACd,mBAAmB;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,KAAK;AAAA,IACL;AAAA,IACA,gBAAgB;AAAA,IAChB,eAAe;AAAA,IACf,gBAAgB,SAAS;AAAA,EACvB,IAAA;AACE,QAAA,QAAQ,eAAe,KAAK;AAC5B,QAAA,WAAW,OAAyB,IAAI;AAC9C,QAAM,EAAE,WAAW,IAAI,UAAU,OAAO,OAAO,QAAQ;AACvD,QAAM,UAAU;AAAA,IACd,OAAO;AAAA,IACP;AAAA,IACA,WAAW,OAAO;AAAA,IAClB,YAAY,OAAO;AAAA,EAAA;AAGrB,QAAM,eAAe,MAAM;AACrB,QAAA,YAAY,CAAC,UAAU;AACzB;AAAA,IACF;AAES;EAAA;AAIT,SAAA,qBAAC,OAAI,EAAA,WAAW,SACd,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACE,GAAG;AAAA,QACJ,cAAY;AAAA,QACZ,mBAAiB;AAAA,QACjB;AAAA,QACA,WAAW,OAAO;AAAA,QAClB;AAAA,QACA;AAAA,QACA,gBAAc;AAAA,QACd,MAAK;AAAA,QACL,UAAU;AAAA,QACV,KAAK;AAAA,MAAA;AAAA,IACP;AAAA,yBACC,SAAM,EAAA,WAAW,OAAO,mBAAmB,SAAS,IACnD,UAAA;AAAA,MAAA,oBAAC,gBACC,EAAA,UAAA,oBAAC,OAAK,EAAA,SAAS,CAAA,GACjB;AAAA,2BACC,OAAI,EAAA,WAAW,OAAO,kBAAkB,eAAW,MAClD,UAAA;AAAA,QAAC,oBAAA,OAAA,EAAI,WAAW,GAAG,OAAO,iBAAiB,OAAO,YAAY,GAAI,UAAa,aAAA,CAAA;AAAA,QAC/E,oBAAC,SAAI,WAAW,GAAG,OAAO,iBAAiB,OAAO,aAAa,GAAI,UAAc,cAAA,CAAA;AAAA,MAAA,GACnF;AAAA,MACC,oBAAA,OAAA,EAAI,WAAW,OAAO,cAAe,CAAA;AAAA,IAAA,GACxC;AAAA,EACF,EAAA,CAAA;AAEJ;"}