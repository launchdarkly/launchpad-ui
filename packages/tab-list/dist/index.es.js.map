{"version":3,"file":"index.es.js","sources":["../src/TabList.tsx"],"sourcesContent":["import type { TabListState } from '@react-stately/tabs';\nimport type { ItemElement, Node } from '@react-types/shared';\nimport type { AriaTabListProps, AriaTabPanelProps } from '@react-types/tabs';\nimport type { ReactNode } from 'react';\n\nimport { useTab, useTabList, useTabPanel } from '@react-aria/tabs';\nimport { useTabListState } from '@react-stately/tabs';\nimport { cx } from 'classix';\nimport { useRef } from 'react';\n\nimport styles from './styles/TabList.module.css';\n\ntype TabListProps<T extends string | number> =\n  | AriaTabListProps<HTMLDivElement> & {\n      /** The active Tab to show on render. The value passed in here should match the value of the active Tab's Item key. */\n      activeTab?: T;\n      /** CSS classes to pass into the TabList wrapper div. */\n      className?: string;\n      /** The children passed into the TabList. This is a react-stately Item with JSX children. */\n      children: ItemElement<ReactNode> | Array<ItemElement<ReactNode>>;\n      /** Array of any disabled Tabs in the grouping. */\n      disabledTabs?: string[];\n      /** Called when the user clicks on a different tab */\n      onChange?: (tab: T) => void;\n      'data-test-id'?: string;\n    };\n\n/** React-aria' useTabListState hook supports a\n * selectedKey under the hood for showing\n * the selected tab, and disabledKeys for disabling\n * tabs. The prop names are not very intuitive,\n * so we use activeTab and disabledTabs instead\n * and re-assign props at the component level\n * for an improved developer experience.\n */\nconst TabList = <T extends number | string>(props: TabListProps<T>) => {\n  const {\n    activeTab,\n    className,\n    disabledTabs,\n    onChange,\n    'data-test-id': testId = 'tab-list',\n    ...rest\n  } = props;\n\n  const ref = useRef<HTMLDivElement>(null);\n  const state = useTabListState({\n    selectedKey: activeTab,\n    onSelectionChange: (val) => onChange?.(val as T),\n    disabledKeys: disabledTabs,\n    ...rest,\n  });\n  const { tabListProps } = useTabList(props, state, ref);\n\n  return (\n    <div className={className} data-test-id={testId}>\n      <div {...tabListProps} ref={ref} className={styles['TabList-list']}>\n        {[...state.collection].map((item) => (\n          <TabItem key={item.key} item={item} state={state} />\n        ))}\n      </div>\n      <TabItemPanel key={state.selectedItem?.key} state={state} />\n    </div>\n  );\n};\n\ntype TabItemProps = {\n  /** This is the react-stately data item. We use the key\n   * in the useTab hook to create tabProps to spread into\n   * the TabItem wrapper div and the rendered prop as the\n   * TabItem's children.\n   */\n  item: Node<HTMLDivElement>;\n  /** The state received from the useTabListState to pass\n   * into the useTab hook.\n   */\n  state: TabListState<HTMLDivElement>;\n  /** Is the TabItem disabled? */\n  isDisabled?: boolean;\n  /** classNames to pass into the TabItem wrapper div.\n   */\n  className?: string;\n};\n\nconst TabItem = ({ className, item: { key, rendered }, state }: TabItemProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { tabProps } = useTab({ key }, state, ref);\n  const isSelected = state.selectedKey === key;\n\n  const classes = cx(styles['TabList-item'], isSelected && styles['is-active'], className);\n\n  return (\n    <div {...tabProps} ref={ref} className={classes}>\n      {rendered}\n    </div>\n  );\n};\n\ntype TabItemPanelProps = AriaTabPanelProps & {\n  /** The state received from the useTabListState to pass\n   * into the useTabPanel hook.\n   */\n  state: TabListState<HTMLDivElement>;\n};\n\nconst TabItemPanel = ({ state, ...props }: TabItemPanelProps) => {\n  const ref = useRef(null);\n  const { tabPanelProps } = useTabPanel(props, state, ref);\n\n  return (\n    <div {...tabPanelProps} ref={ref} className={styles['TabList-panel']}>\n      {state.selectedItem?.props.children}\n    </div>\n  );\n};\n\nexport { TabList };\nexport type { TabListProps };\n"],"names":["TabList","props","activeTab","className","disabledTabs","onChange","testId","rest","ref","useRef","state","useTabListState","selectedKey","onSelectionChange","val","disabledKeys","tabListProps","useTabList","_jsx","styles","collection","map","item","key","selectedItem","TabItem","rendered","tabProps","useTab","isSelected","classes","cx","TabItemPanel","tabPanelProps","useTabPanel","children"],"mappings":";;;;;;;;;;;AAmCMA,MAAAA,UAAU,CAA4BC,UAA2B;;AAC/D,QAAA;AAAA,IACJC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACA,gBAAgBC,SAAS;AAAA,OACtBC;AAAAA,EACDN,IAAAA;AAEEO,QAAAA,MAAMC,OAAuB,IAAI;AACvC,QAAMC,QAAQC,gBAAgB;AAAA,IAC5BC,aAAaV;AAAAA,IACbW,mBAAoBC,CAAQT,QAAAA,qCAAWS;AAAAA,IACvCC,cAAcX;AAAAA,IACd,GAAGG;AAAAA,EAAAA,CACJ;AACK,QAAA;AAAA,IAAES;AAAAA,EAAiBC,IAAAA,WAAWhB,OAAOS,OAAOF,GAAG;AAErD,8BACE,OAAA;AAAA,IAAK;AAAA,IAAsB,gBAAcF;AAAAA,IAAO,UAC9C,CAAAY,oBAAA,OAAA;AAAA,MAAA,GAASF;AAAAA,MAAc;AAAA,MAAU,WAAWG,OAAO;AAAA,MAAgB,UAChE,CAAC,GAAGT,MAAMU,UAAU,EAAEC,IAAKC,CAC1B,SAAAJ,oBAAC,SAAO;AAAA,QAAgB;AAAA,QAAY;AAAA,MAAA,GAAtBI,KAAKC,GAAG,CACvB;AAAA,IAAA,CACG,GACNL,oBAAC,cAAY;AAAA,MAA+B;AAAA,IAAA,IAAzBR,WAAMc,iBAANd,mBAAoBa,GAAG,CAAkB;AAAA,EAAA,CACxD;AAEV;AAoBA,MAAME,UAAU,CAAC;AAAA,EAAEtB;AAAAA,EAAWmB,MAAM;AAAA,IAAEC;AAAAA,IAAKG;AAAAA,EAAS;AAAA,EAAGhB;AAAoB,MAAM;AACzEF,QAAAA,MAAMC,OAAuB,IAAI;AACjC,QAAA;AAAA,IAAEkB;AAAAA,MAAaC,OAAO;AAAA,IAAEL;AAAAA,EAAAA,GAAOb,OAAOF,GAAG;AACzCqB,QAAAA,aAAanB,MAAME,gBAAgBW;AAEzC,QAAMO,UAAUC,GAAGZ,OAAO,iBAAiBU,cAAcV,OAAO,cAAchB,SAAS;AAEvF,6BACE,OAAA;AAAA,IAAA,GAASwB;AAAAA,IAAU;AAAA,IAAU,WAAWG;AAAAA,IAAQ,UAC7CJ;AAAAA,EAAAA,CACG;AAEV;AASA,MAAMM,eAAe,CAAC;AAAA,EAAEtB;AAAAA,KAAUT;AAAyB,MAAM;;AACzDO,QAAAA,MAAMC,OAAO,IAAI;AACjB,QAAA;AAAA,IAAEwB;AAAAA,EAAkBC,IAAAA,YAAYjC,OAAOS,OAAOF,GAAG;AAEvD,6BACE,OAAA;AAAA,IAAA,GAASyB;AAAAA,IAAe;AAAA,IAAU,WAAWd,OAAO;AAAA,IAAiB,WAClET,WAAMc,iBAANd,mBAAoBT,MAAMkC;AAAAA,EAAAA,CACvB;AAEV;"}