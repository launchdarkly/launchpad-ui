{"version":3,"file":"index.js","sources":["../src/TabList.tsx"],"sourcesContent":["import type { TabListState } from '@react-stately/tabs';\nimport type { ItemElement, Node } from '@react-types/shared';\nimport type { AriaTabListProps, AriaTabPanelProps } from '@react-types/tabs';\nimport type { ReactNode } from 'react';\n\nimport { useTab, useTabList, useTabPanel } from '@react-aria/tabs';\nimport { useTabListState } from '@react-stately/tabs';\nimport { cx } from 'classix';\nimport { useRef } from 'react';\n\nimport styles from './styles/TabList.module.css';\n\ntype TabListProps<T extends string | number> =\n  | AriaTabListProps<HTMLDivElement> & {\n      /** The active Tab to show on render. The value passed in here should match the value of the active Tab's Item key. */\n      activeTab?: T;\n      /** CSS classes to pass into the TabList wrapper div. */\n      className?: string;\n      /** The children passed into the TabList. This is a react-stately Item with JSX children. */\n      children: ItemElement<ReactNode> | Array<ItemElement<ReactNode>>;\n      /** Array of any disabled Tabs in the grouping. */\n      disabledTabs?: string[];\n      /** Called when the user clicks on a different tab */\n      onChange?: (tab: T) => void;\n      'data-test-id'?: string;\n    };\n\n/** React-aria' useTabListState hook supports a\n * selectedKey under the hood for showing\n * the selected tab, and disabledKeys for disabling\n * tabs. The prop names are not very intuitive,\n * so we use activeTab and disabledTabs instead\n * and re-assign props at the component level\n * for an improved developer experience.\n */\nconst TabList = <T extends number | string>(props: TabListProps<T>) => {\n  const {\n    activeTab,\n    className,\n    disabledTabs,\n    onChange,\n    'data-test-id': testId = 'tab-list',\n    ...rest\n  } = props;\n\n  const ref = useRef<HTMLDivElement>(null);\n  const state = useTabListState({\n    selectedKey: activeTab,\n    onSelectionChange: (val) => onChange?.(val as T),\n    disabledKeys: disabledTabs,\n    ...rest,\n  });\n  const { tabListProps } = useTabList(props, state, ref);\n\n  return (\n    <div className={className} data-test-id={testId}>\n      <div {...tabListProps} ref={ref} className={styles['TabList-list']}>\n        {[...state.collection].map((item) => (\n          <TabItem key={item.key} item={item} state={state} />\n        ))}\n      </div>\n      <TabItemPanel key={state.selectedItem?.key} state={state} />\n    </div>\n  );\n};\n\ntype TabItemProps = {\n  /** This is the react-stately data item. We use the key\n   * in the useTab hook to create tabProps to spread into\n   * the TabItem wrapper div and the rendered prop as the\n   * TabItem's children.\n   */\n  item: Node<HTMLDivElement>;\n  /** The state received from the useTabListState to pass\n   * into the useTab hook.\n   */\n  state: TabListState<HTMLDivElement>;\n  /** Is the TabItem disabled? */\n  isDisabled?: boolean;\n  /** classNames to pass into the TabItem wrapper div.\n   */\n  className?: string;\n};\n\nconst TabItem = ({ className, item: { key, rendered }, state }: TabItemProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const { tabProps } = useTab({ key }, state, ref);\n  const isSelected = state.selectedKey === key;\n\n  const classes = cx(styles['TabList-item'], isSelected && styles['is-active'], className);\n\n  return (\n    <div {...tabProps} ref={ref} className={classes}>\n      {rendered}\n    </div>\n  );\n};\n\ntype TabItemPanelProps = AriaTabPanelProps & {\n  /** The state received from the useTabListState to pass\n   * into the useTabPanel hook.\n   */\n  state: TabListState<HTMLDivElement>;\n};\n\nconst TabItemPanel = ({ state, ...props }: TabItemPanelProps) => {\n  const ref = useRef(null);\n  const { tabPanelProps } = useTabPanel(props, state, ref);\n\n  return (\n    <div {...tabPanelProps} ref={ref} className={styles['TabList-panel']}>\n      {state.selectedItem?.props.children}\n    </div>\n  );\n};\n\nexport { TabList };\nexport type { TabListProps };\n"],"names":["useRef","useTabListState","useTabList","jsxs","jsx","useTab","cx","useTabPanel"],"mappings":";;;;;;;;;;;;;AAmCM,MAAA,UAAU,CAA4B,UAA2B;;AAC/D,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,gBAAgB,SAAS;AAAA,OACtB;AAAA,EACD,IAAA;AAEE,QAAA,MAAMA,aAAuB,IAAI;AACvC,QAAM,QAAQC,KAAAA,gBAAgB;AAAA,IAC5B,aAAa;AAAA,IACb,mBAAmB,CAAC,QAAQ,qCAAW;AAAA,IACvC,cAAc;AAAA,IACd,GAAG;AAAA,EAAA,CACJ;AACD,QAAM,EAAE,aAAa,IAAIC,OAAAA,WAAW,OAAO,OAAO,GAAG;AAErD,SACGC,2BAAAA,KAAA,OAAA,EAAI,WAAsB,gBAAc,QACvC,UAAA;AAAA,IAACC,2BAAAA,IAAA,OAAA,EAAK,GAAG,cAAc,KAAU,WAAW,OAAO,iBAChD,UAAC,CAAA,GAAG,MAAM,UAAU,EAAE,IAAI,CAAC,SACzBA,2BAAAA,IAAA,SAAA,EAAuB,MAAY,SAAtB,KAAK,GAA+B,CACnD,EACH,CAAA;AAAA,IACCA,2BAAA,IAAA,cAAA,EAA2C,MAAzB,IAAA,WAAM,iBAAN,mBAAoB,GAAmB;AAAA,EAC5D,EAAA,CAAA;AAEJ;AAoBA,MAAM,UAAU,CAAC,EAAE,WAAW,MAAM,EAAE,KAAK,SAAA,GAAY,YAA0B;AACzE,QAAA,MAAMJ,aAAuB,IAAI;AACjC,QAAA,EAAE,aAAaK,OAAA,OAAO,EAAE,OAAO,OAAO,GAAG;AACzC,QAAA,aAAa,MAAM,gBAAgB;AAEzC,QAAM,UAAUC,WAAG,OAAO,iBAAiB,cAAc,OAAO,cAAc,SAAS;AAEvF,wCACG,OAAK,EAAA,GAAG,UAAU,KAAU,WAAW,SACrC,UACH,SAAA,CAAA;AAEJ;AASA,MAAM,eAAe,CAAC,EAAE,UAAU,YAA+B;;AACzD,QAAA,MAAMN,aAAO,IAAI;AACvB,QAAM,EAAE,cAAc,IAAIO,OAAAA,YAAY,OAAO,OAAO,GAAG;AAGrD,SAAAH,2BAAAA,IAAC,OAAK,EAAA,GAAG,eAAe,KAAU,WAAW,OAAO,kBACjD,WAAA,WAAM,iBAAN,mBAAoB,MAAM,SAC7B,CAAA;AAEJ;;"}