{"version":3,"file":"index.es.js","sources":["../src/Dropdown.tsx","../src/DropdownButton.tsx"],"sourcesContent":["import type { PopoverProps } from '@launchpad-ui/popover';\nimport type { ReactElement } from 'react';\n\nimport { Popover } from '@launchpad-ui/popover';\nimport { cx } from 'classix';\nimport { Children, cloneElement, useEffect, useRef, useState } from 'react';\n\ntype DropdownState = {\n  isOpen?: boolean;\n};\n\ntype DropdownProps<T extends string | object | number> = PopoverProps & {\n  onSelect?: (item: T, stateChanges: DropdownState) => void;\n  onStateChange?: (state: DropdownState) => void;\n};\n\nconst Dropdown = <T extends string | object | number>(props: DropdownProps<T>) => {\n  const {\n    placement,\n    disabled,\n    targetClassName,\n    popoverClassName,\n    isOpen: isOpenProp,\n    onInteraction,\n    onSelect,\n    onStateChange,\n    children,\n    'data-test-id': testId = 'dropdown',\n    ...rest\n  } = props;\n\n  const triggerRef = useRef<HTMLElement>(null);\n  const [isOpen, setIsOpen] = useState(isOpenProp ?? false);\n  const [hasOpened, setHasOpened] = useState(isOpen);\n\n  useEffect(() => {\n    if (isOpenProp !== undefined) {\n      setIsOpen(isOpenProp);\n    }\n  }, [isOpenProp]);\n\n  useEffect(() => {\n    // Focus the button upon closing for convenient tabbing\n    if (hasOpened && isOpen === false) {\n      setTimeout(() => {\n        const current = triggerRef.current;\n        if (!current) {\n          return;\n        }\n\n        // If a dropdown menu item triggers a modal, we do not want to focus the trigger. Instead\n        // we let the modal components control their own focus.\n        // Note that this is not ideal since closing the modal will not cause the dropdown trigger\n        // to regain focus.\n        const hasModal = current.closest?.('.has-overlay');\n\n        !hasModal && current.focus?.();\n      });\n    }\n  }, [isOpen, hasOpened]);\n\n  useEffect(() => {\n    setHasOpened(isOpen);\n    onStateChange?.({ isOpen });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen]);\n\n  const renderTrigger = () => {\n    return cloneElement(parseChildren().target, {\n      'aria-haspopup': true,\n      'aria-expanded': isOpen ? true : false,\n      ref: triggerRef,\n      isopen: isOpen?.toString(),\n    });\n  };\n\n  const renderContent = () => {\n    return cloneElement(parseChildren().content, {\n      onSelect: handleSelect,\n    });\n  };\n\n  const handleSelect = (item: T) => {\n    setIsOpen(false);\n    onSelect?.(item, { isOpen: false });\n  };\n\n  const handlePopoverInteraction = (nextIsOpen: boolean) => {\n    setIsOpen(nextIsOpen);\n  };\n\n  const parseChildren = () => {\n    const [targetChild, contentChild] = Children.toArray(children);\n    return {\n      target: targetChild as ReactElement,\n      content: contentChild as ReactElement,\n    };\n  };\n\n  const popoverTargetClasses = cx('Dropdown-target', targetClassName);\n  const popoverClasses = cx('Dropdown', popoverClassName);\n\n  return (\n    <Popover\n      isOpen={isOpen}\n      placement={placement}\n      onInteraction={onInteraction || handlePopoverInteraction}\n      restrictHeight={false}\n      disabled={disabled}\n      targetClassName={popoverTargetClasses}\n      popoverClassName={popoverClasses}\n      data-test-id={testId}\n      {...rest}\n    >\n      {renderTrigger()}\n      {renderContent()}\n    </Popover>\n  );\n};\n\nexport { Dropdown };\nexport type { DropdownProps };\n","import type { ButtonProps } from '@launchpad-ui/button';\n\nimport { Button } from '@launchpad-ui/button';\nimport { ExpandMore } from '@launchpad-ui/icons';\nimport { forwardRef } from 'react';\n\ntype DropdownButtonProps = ButtonProps & {\n  hideCaret?: boolean;\n};\n\nconst DropdownButton = forwardRef<HTMLButtonElement, DropdownButtonProps>((props, ref) => {\n  const { children, hideCaret, 'data-test-id': testId = 'dropdown-button', ...rest } = props;\n\n  return (\n    <Button {...rest} data-test-id={testId} ref={ref}>\n      {children} {!hideCaret && <ExpandMore size=\"small\" />}\n    </Button>\n  );\n});\n\nDropdownButton.displayName = 'DropdownButton';\n\nexport { DropdownButton };\nexport type { DropdownButtonProps };\n"],"names":[],"mappings":";;;;;;AAgBM,MAAA,WAAW,CAAqC,UAA4B;AAC1E,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,gBAAgB,SAAS;AAAA,OACtB;AAAA,EACD,IAAA;AAEE,QAAA,aAAa,OAAoB,IAAI;AAC3C,QAAM,CAAC,QAAQ,SAAS,IAAI,SAAS,cAAc,KAAK;AACxD,QAAM,CAAC,WAAW,YAAY,IAAI,SAAS,MAAM;AAEjD,YAAU,MAAM;AACd,QAAI,eAAe,QAAW;AAC5B,gBAAU,UAAU;AAAA,IACtB;AAAA,EAAA,GACC,CAAC,UAAU,CAAC;AAEf,YAAU,MAAM;AAEV,QAAA,aAAa,WAAW,OAAO;AACjC,iBAAW,MAAM;;AACf,cAAM,UAAU,WAAW;AAC3B,YAAI,CAAC,SAAS;AACZ;AAAA,QACF;AAMM,cAAA,YAAW,aAAQ,YAAR,iCAAkB;AAElC,SAAA,cAAY,aAAQ,UAAR;AAAA,MAAgB,CAC9B;AAAA,IACH;AAAA,EAAA,GACC,CAAC,QAAQ,SAAS,CAAC;AAEtB,YAAU,MAAM;AACd,iBAAa,MAAM;AACH,mDAAA,EAAE;EAAQ,GAEzB,CAAC,MAAM,CAAC;AAEX,QAAM,gBAAgB,MAAM;AACnB,WAAA,aAAa,cAAc,EAAE,QAAQ;AAAA,MAC1C,iBAAiB;AAAA,MACjB,iBAAiB,SAAS,OAAO;AAAA,MACjC,KAAK;AAAA,MACL,QAAQ,iCAAQ;AAAA,IAAS,CAC1B;AAAA,EAAA;AAGH,QAAM,gBAAgB,MAAM;AACnB,WAAA,aAAa,cAAc,EAAE,SAAS;AAAA,MAC3C,UAAU;AAAA,IAAA,CACX;AAAA,EAAA;AAGG,QAAA,eAAe,CAAC,SAAY;AAChC,cAAU,KAAK;AACf,yCAAW,MAAM,EAAE,QAAQ,MAAO;AAAA,EAAA;AAG9B,QAAA,2BAA2B,CAAC,eAAwB;AACxD,cAAU,UAAU;AAAA,EAAA;AAGtB,QAAM,gBAAgB,MAAM;AAC1B,UAAM,CAAC,aAAa,YAAY,IAAI,SAAS,QAAQ,QAAQ;AACtD,WAAA;AAAA,MACL,QAAQ;AAAA,MACR,SAAS;AAAA,IAAA;AAAA,EACX;AAGI,QAAA,uBAAuB,GAAG,mBAAmB,eAAe;AAC5D,QAAA,iBAAiB,GAAG,YAAY,gBAAgB;AAGpD,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA,eAAe,iBAAiB;AAAA,MAChC,gBAAgB;AAAA,MAChB;AAAA,MACA,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,gBAAc;AAAA,MACb,GAAG;AAAA,MAEH,UAAA;AAAA,QAAc,cAAA;AAAA,QACd,cAAc;AAAA,MAAA;AAAA,IAAA;AAAA,EAAA;AAGrB;AC5GA,MAAM,iBAAiB,WAAmD,CAAC,OAAO,QAAQ;AACxF,QAAM,EAAE,UAAU,WAAW,gBAAgB,SAAS,sBAAsB,KAAS,IAAA;AAErF,8BACG,QAAQ,EAAA,GAAG,MAAM,gBAAc,QAAQ,KACrC,UAAA;AAAA,IAAA;AAAA,IAAS;AAAA,IAAE,CAAC,aAAc,oBAAA,YAAA,EAAW,MAAK,QAAQ,CAAA;AAAA,EACrD,EAAA,CAAA;AAEJ,CAAC;AAED,eAAe,cAAc;"}